---
#@ load("@ytt:data", "data")

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************
secrets:
#! gcr_viewer_key is used for getting concourse container images from the Cryogenics GCR instance. Currently bosh-ecosystem-concourse@cf-bosh-concourse.iam.gserviceaccount.com is granted access to the images.
- &gcr_viewer_key ((gcp_credentials_json))

#! used to upload images to docker registry
- &gcp_docker_password ((gcp_credentials_json))

#! github_access_token is used to create PRs and fetch github releases.
- &github_access_token ((github_read_write_token))

#! github_deploy_keys are generated in credhub and the public keys added to the individual repos
- &github_deploy_key_bosh-backup-and-restore ((github_deploy_key_bosh-backup-and-restore.private_key))
- &github_deploy_key_bosh-backup-and-restore-test-releases ((github_deploy_key_bosh-backup-and-restore-test-releases.private_key))
- &github_deploy_key_cryogenics-concourse-tasks ((github_deploy_key_cryogenics-concourse-tasks.private_key))

- &aws-access
#! AWS access keys for the 686843836666 account
  access_key_id: &aws_access_key ((bbr_aws_access_key.username))
  secret_access_key: &aws_secret_key ((bbr_aws_access_key.password))
  aws_role_arn: &aws_role_arn ((bbr_aws_access_key.role_arn))
- &AWS_ACCESS
  AWS_ACCESS_KEY: *aws_access_key
  AWS_ASSUMED_ROLE_ARN: *aws_role_arn
  AWS_SECRET_KEY: *aws_secret_key
- &AWS_ACCESS_2
  ACCESS_KEY: *aws_access_key
  SECRET_KEY: *aws_secret_key
  ROLE_ARN: *aws_role_arn

#! gcp_service_accounts_bucket_owner was needed on 2023-09-25 to access gcs buckets required in this pipeline (e.g. semver resource). It was generated by using personal creds to log into the mapbu-cryogenics GCP project
- &gcp_service_accounts_bucket_owner ((gcp_credentials_json))

#! homebrew_ci_bot_private_key was needed on 2023-09-25 to pull and update the homebrew repo with the new bbr cli version. It was generated by
- &homebrew_ci_bot_private_key  ((github_deploy_key_homebrew-tap.private_key))

#! as of 23/04/2024 gchat webhook is used to send us ci status messages. It was created in gchat space settings after logging in with personal creds
- &gchat_webhook ((gchat-webhook-dap-bosh-ecosystem-dev))

#! They are static values stored in credhub.
- &test-bosh-director-ip 10.0.255.5
- &test-bosh-director-ip-priv-key ((test_bosh_director_ssh_key.private_key))
- &test-bosh-director-ip-pub-key ((test_bosh_director_ssh_key.public_key))

- &shepherd_account_key ((bosh-ecosystem-shepherd-service-account))
#! shepherd_account_key was needed on 2023-09-28 to claim shepherd environments. It was created using `shepherd create service-account` after logging in with WS1.

#! github_email and github_user added on 2023-12-07 to commit go mod bumps
- &github_email tas-bosh-ecosystem.pdl@broadcom.com
- &github_user "Bosh Ecosystem"

- &docker_username ((docker.username))
- &docker_password ((docker.password))

#! Access token for our service account user in Github Enterprise
- &ghe_svc_account_personal_access_token ((svc-bosh-ecosystem-ghe-personal-access-token))

#! Deploy key necessary to clone the bosh-ecosystem-concourse repo
- &ghe_bosh_ecosystem_concourse_deploy_key ((github_deploy_key_bosh_ecosystem_concourse.private_key))

- &rmt_params
  RMT_RMT_EMAIL: &RMT_RELEASE_CONTACT "maya.rosecrance@broadcom.com"
  RMT_RMT_HOST: ((rmt-prod-host))
  RMT_RMT_USERNAME: ((rmt-prod-user.username))
  RMT_RMT_PASSWORD: ((rmt-prod-user.password))
  RMT_SFTP_HOST: ((sftp-prod-host))
  RMT_SFTP_USERNAME: ((sftp-prod-user.username))
  RMT_SFTP_PASSWORD: ((sftp-prod-user.password))
  RMT_VERBOSE: true

#! **************
#! End of secrets
#! **************

number_of_claim_env_retries: &number_of_claim_env_retries 5
number_of_system_test_retries: &number_of_system_test_retries 3

#! These are just recurring mappings to vars loaded via load_var steps.
ts-bosh-env: &ts-bosh-env
  BOSH_ENVIRONMENT: "((.:pooled-env.BOSH_ENVIRONMENT))"
  BOSH_CLIENT: "((.:pooled-env.BOSH_CLIENT))"
  BOSH_CLIENT_SECRET: "((.:pooled-env.BOSH_CLIENT_SECRET))"
  BOSH_CA_CERT: "((.:pooled-env.BOSH_CA_CERT))"
  BOSH_GW_HOST: "((.:pooled-env.INSTANCE_JUMPBOX_EXTERNAL_IP)):22"
  BOSH_GW_USER: "((.:pooled-env.INSTANCE_JUMPBOX_USER))"
  BOSH_GW_PRIVATE_KEY: "((.:pooled-env.INSTANCE_JUMPBOX_PRIVATE))"

ts-2-bosh-env: &ts-2-bosh-env
  BOSH_ENVIRONMENT: ((.:additional-pooled-env.BOSH_ENVIRONMENT))
  BOSH_CLIENT: ((.:additional-pooled-env.BOSH_CLIENT))
  BOSH_CLIENT_SECRET: ((.:additional-pooled-env.BOSH_CLIENT_SECRET))
  BOSH_CA_CERT: "((.:additional-pooled-env.BOSH_CA_CERT))"
  BOSH_GW_HOST: "((.:additional-pooled-env.INSTANCE_JUMPBOX_EXTERNAL_IP)):22"
  BOSH_GW_USER: "((.:additional-pooled-env.INSTANCE_JUMPBOX_USER))"
  BOSH_GW_PRIVATE_KEY: "((.:additional-pooled-env.INSTANCE_JUMPBOX_PRIVATE))"

test-bosh-director-deployment: &test-bosh-director-deployment test-bosh-director

groups:
- name: test
  jobs:
  - test-build-s3-config-validator
  - validate-aws-s3-config
  - claim-env
  - system-test-deployment
  - system-test-director
  - unclaim-env
  - merge-pr
  - govulncheck
- name: release-github
  jobs:
  - build-rc
  - run-drats
  - run-b-drats
  - check-for-changes
  - publish-to-github
  - publish-dev-internal-to-rmt
  - update-homebrew-formula
- name: bump
  jobs:
  - bump-deps-bbr-cli
  - bump-deps-s3-config-validator

- name: registry-images
  jobs:
  - build-bbr-pcf-pipeline-tasks

resource_types:
- name: gitlab
  type: registry-image
  source:
    repository: devtools-docker.artifactory.eng.vmware.com/vmware/runway/resourcetypes/gitlab-resource
    tag: 1.0.0

- name: shepherd
  source:
    tag: v1
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
  type: registry-image

- name: bosh-deployment-resource
  type: registry-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    username: *docker_username
    password: *docker_password

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource
    username: *docker_username
    password: *docker_password

- name: google-chat-notify-resource
  type: registry-image
  source:
    repository: springio/google-chat-notify-resource
    username: *docker_username
    password: *docker_password
    tag: 0.0.1-SNAPSHOT

- name: pull-request
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/concourse-resources/pr-queue-resource
    username: _json_key
    password: *gcr_viewer_key

resources:
- name: image-cryogenics-essentials
  type: registry-image
  icon: docker
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/essentials/cryo-essentials
    username: _json_key
    password: *gcr_viewer_key

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- name: every-month
  type: time
  source:
    interval: 720h #! (24h * 30 days) as It's basically golang and clamav bumps

- name: every-day
  type: time
  icon: camera-timer
  source:
    interval: 24h

- name: bbr-director-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore-test-releases.git
    private_key: *github_deploy_key_bosh-backup-and-restore-test-releases
    branch: master
    paths:
    - test-bosh-backup-and-restore-release

- name: bbr-deployment-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore-test-releases.git
    private_key: *github_deploy_key_bosh-backup-and-restore-test-releases
    branch: master
    paths:
    - redis-test-release
    - lock-ordering-release
    - many-bbr-jobs-release

- name: latest-pull-request
  icon: source-pull
  type: pull-request
  source:
    base_branch: master
    repository: cloudfoundry/bosh-backup-and-restore
    access_token: *github_access_token
    disable_forks: true
    autosync_pr: true
    watch_checks_interval: "600"
    assign_to: "@me"

- name: main
  icon: github
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore.git
    private_key: *github_deploy_key_bosh-backup-and-restore
    branch: master
    disable_git_lfs: true

- name: homebrew-tap
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/homebrew-tap.git
    branch: master
    private_key: *homebrew_ci_bot_private_key

- name: gormt-repo
  type: git
  icon: github
  tags: [ broadcom ]
  source:
    uri: https://github.gwd.broadcom.net/TNZ/gormt.git
    username: svc.bosh-ecosystem@broadcom.net
    password: *ghe_svc_account_personal_access_token

- name: bosh-ecosystem-concourse
  type: git
  tags: [ broadcom ]
  source:
    uri: https://github.gwd.broadcom.net/TNZ/bosh-ecosystem-concourse.git
    username: svc.bosh-ecosystem@broadcom.net
    password: *ghe_svc_account_personal_access_token

- name: bbr-artefacts
  type: s3
  icon: aws
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)\.tar
    <<: *aws-access

- name: bbr-release
  type: github-release
  icon: github
  source:
    repository: bosh-backup-and-restore
    user: cloudfoundry
    access_token: *github_access_token
    release: true

- name: release-version
  type: semver
  icon: google
  source:
    bucket: bbr-pipeline
    key: versions/bosh-backup-and-restore/final
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13
    driver: gcs

- name: release-candidate-version
  type: semver
  icon: google
  source:
    bucket: bbr-pipeline
    key: versions/bosh-backup-and-restore/release-candidate
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13-rc.1
    driver: gcs

- name: build-version
  type: semver
  icon: google
  source:
    bucket: bbr-pipeline
    key: versions/bosh-backup-and-restore/build
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13-build.516
    driver: gcs

- name: jammy-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: bosh-deployment
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-deployment.git

- name: test-bosh-director-deployment
  type: bosh-deployment-resource
  source:
    deployment: *test-bosh-director-deployment
    skip_check: true

- name: additional-test-bosh-director-deployment
  type: bosh-deployment-resource
  source:
    deployment: ci
    skip_check: true

- name: s3-config-validator-artefacts
  type: gcs
  icon: google
  source:
    bucket: bbr-pipeline
    json_key: *gcp_service_accounts_bucket_owner
    regexp: validator-test-artifacts/bbr-s3-config-validator.(.*).tgz

- name: tas-env
  type: shepherd
  icon: pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: #@ data.values.tas_versions[-1]["pool_name"]

- name: cryogenics-ci
  type: git
  tags: [ broadcom ]
  source:
    uri: https://github.gwd.broadcom.net/TNZ/cryogenics-concourse-tasks.git
    branch: main
    username: svc.bosh-ecosystem@broadcom.net
    password: *ghe_svc_account_personal_access_token

- name: gchat-notification
  type: google-chat-notify-resource
  source:
    url: *gchat_webhook

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: main

- name: cf-deployment-env
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/disaster-recovery-acceptance-tests
    branch: main

- name: b-drats
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-disaster-recovery-acceptance-tests
    branch: master

- name: environment
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: additional-environment
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: ubuntu-lts
  type: registry-image
  source:
    repository: ubuntu
    tag: latest
    username: *docker_username
    password: *docker_password

- name: bbr-pcf-pipeline-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/bbr-pcf-pipeline-tasks.git
    branch: main
    paths: [docker/Dockerfile]

- name: bbr-pcf-pipeline-tasks-final
  type: registry-image
  source:
    tag: final
    repository: us-west1-docker.pkg.dev/cf-bosh-concourse/bbr-pipeline/bbr-pipeline-tasks
    username: _json_key
    password: *gcp_docker_password

- name: oci-build-task-registry-image
  type: registry-image
  source:
    repository: concourse/oci-build-task
    username: *docker_username
    password: *docker_password

- name: golang-image
  type: registry-image
  source:
    repository: golang
    username: *docker_username
    password: *docker_password

- name: bosh-ecosystem-registry-image
  type: registry-image
  source:
    repository: bosh/bosh-ecosystem-concourse
    username: *docker_username
    password: *docker_password

- name: every-monday
  type: time
  icon: timer-outline
  source:
    initial_version: true
    start: 9:00 AM
    stop: 5:00 PM
    days: [Monday,Friday]
    location: Europe/London

jobs:
- name: system-test-director
  serial: true
  serial_groups: [ system-test-director ]
  plan:
  - in_parallel:
    - get: environment
      passed: [ claim-env ]
      trigger: true
    - get: latest-pull-request
      passed: [ claim-env ]
    - get: bosh-deployment
    - get: bbr-director-test-releases
    - get: jammy-stemcell
    - get: cryogenics-ci
      passed: [ claim-env ]
      tags: [ broadcom ]
    - get: image-cryogenics-essentials
  - task: alias-env
    image: image-cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: environment
  - load_var: pooled-env
    file: bosh-env/metadata.yml
    format: yml
  - task: generate-bosh-deployment-source-file
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bosh-deployment-resource-source-file-adapter/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      <<: *ts-bosh-env
  - put: deploy-fake-director
    resource: test-bosh-director-deployment
    params:
      manifest: latest-pull-request/fixtures/fake-director.yml
      stemcells: [ jammy-stemcell/*.tgz ]
      source_file: source-file/source-file.yml
      vars:
        deployment-name: test-bosh-director
        jumpbox-public-key: *test-bosh-director-ip-pub-key
        test_release_path: /tmp/build/put/bbr-director-test-releases/test-bosh-backup-and-restore-release
        internal_ip: *test-bosh-director-ip
  - task: system-test-director
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-system-director/task.yml
    privileged: true
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      USE_SHUTTLE: false
      DIRECTOR_HOST: *test-bosh-director-ip
      DIRECTOR_SSH_KEY: *test-bosh-director-ip-priv-key
      DIRECTOR_SSH_USERNAME: jumpbox
      BOSH_DEPLOYMENT: *test-bosh-director-deployment
      <<: *ts-bosh-env

  - put: delete-system-director
    resource: test-bosh-director-deployment
    params:
      delete:
        enabled: true
      source_file: source-file/source-file.yml

- name: system-test-deployment
  serial: true
  plan:
  - in_parallel:
    - get: bbr-deployment-test-releases
      trigger: true
    - get: environment
      passed: [ claim-env ]
      trigger: true
    - get: additional-environment
      passed: [ claim-env ]
    - get: bosh-backup-and-restore
      resource: latest-pull-request
      passed: [ claim-env ]
    - get: bbr-director-test-releases
    - get: jammy-stemcell
    - get: image-cryogenics-essentials
    - get: cryogenics-ci
      passed: [ claim-env ]
      tags: [ broadcom ]
  - task: alias-env
    image: image-cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: environment
  - load_var: pooled-env
    file: bosh-env/metadata.yml
    format: yml
  - task: alias-additional-env
    image: image-cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: additional-environment
    output_mapping:
      bosh-env: additional-bosh-env
  - load_var: additional-pooled-env
    file: additional-bosh-env/metadata.yml
    format: yml
  - task: generate-bosh-deployment-source-file
    image: image-cryogenics-essentials
    file: bosh-backup-and-restore/ci/tasks/bosh-deployment-resource-source-file-adapter/task.yml
    params:
      <<: *ts-2-bosh-env
  - put: deploy-fake-director
    resource: additional-test-bosh-director-deployment
    params:
      manifest: bosh-backup-and-restore/fixtures/fake-director.yml
      stemcells: [ jammy-stemcell/*.tgz ]
      source_file: source-file/source-file.yml
      vars:
        deployment-name: ci
        jumpbox-public-key: *test-bosh-director-ip-pub-key
        test_release_path: /tmp/build/put/bbr-director-test-releases/test-bosh-backup-and-restore-release
        internal_ip: *test-bosh-director-ip
  - in_parallel:
    - task: upload-redis-test-release-to-bosh
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-2-bosh-env
    - task: upload-many-bbr-jobs-release-to-bosh-uaa
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *ts-2-bosh-env
    - task: upload-many-bbr-jobs-release-to-bosh
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *ts-bosh-env
    - task: upload-redis-test-release-to-bosh
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-bosh-env
    - task: upload-redis-test-release-to-bosh-uaa
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-2-bosh-env
    - task: upload-lock-ordering-release-to-bosh-uaa
      image: image-cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: lock-ordering-release
        <<: *ts-2-bosh-env

    - task: allow-connections-to-bosh-director-on-port-25555
      image: image-cryogenics-essentials
      config:
        platform: linux
        inputs:
        - name: additional-environment
        run:
          path: /bin/bash
          args:
          - -c
          - |
            #!/bin/bash
            . <(smith -l additional-environment/metadata bosh)
            ENV_NAME=$(cat additional-environment/metadata | jq .name -r)
            bosh cc > cc.yml
            bosh ucc -n <( bosh int cc.yml -o <( echo -e "- type: replace\n  path: /vm_types/name=minimal/cloud_properties/tags?\n  value: [${ENV_NAME}-bosh-open]") )


  - task: system-deployment-with-uaa
    image: image-cryogenics-essentials
    attempts: *number_of_system_test_retries
    file: bosh-backup-and-restore/ci/tasks/bbr-system-deployment/task.yml
    params:
      <<: *ts-2-bosh-env

- name: test-build-s3-config-validator
  serial_groups:
  - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: latest-pull-request
      trigger: true
    - get: build-version
      params: { pre: build }
    - get: image-cryogenics-essentials
  - task: unit-test
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-unit-test/task.yml
    params:
      <<: *AWS_ACCESS
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: e2e-test
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-e2e-test/task.yml
    params:
      <<: *AWS_ACCESS
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: build
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-build/task.yml
    input_mapping:
      version: build-version
      repo: latest-pull-request
  - put: build-version
    params: { file: build-version/number }
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: validate-aws-s3-config
  serial: true
  plan:
  - in_parallel:
    - get: s3-config-validator-artefacts
      passed: [ test-build-s3-config-validator ]
      trigger: true
    - get: latest-pull-request
      passed: [ test-build-s3-config-validator ]
    - get: image-cryogenics-essentials
  - task: move-and-run-validator
    image: image-cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-validate-aws-s3-config/task.yml
    params:
      <<: *AWS_ACCESS_2
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
      bbr-s3-config-validator-test-artifacts: s3-config-validator-artefacts

- name: merge-pr
  plan:
  - in_parallel:
    - get: latest-pull-request
      passed: [ system-test-deployment, system-test-director, validate-aws-s3-config ]
      trigger: true
  - put: latest-pull-request
    params:
      merge: true

- name: build-rc
  serial_groups:
  - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: main
      trigger: true
    - get: release-candidate-version
      params:
        pre: rc
    - get: image-cryogenics-essentials
    - get: next-release-version
      resource: release-candidate-version
      params:
        bump: final
  - task: build-bbr
    image: image-cryogenics-essentials
    file: main/ci/tasks/bbr-build/task.yml
    input_mapping:
      release-version: next-release-version
      release-candidate-version: release-candidate-version
      bosh-backup-and-restore: main
  - task: build-s3-config-validator
    image: image-cryogenics-essentials
    file: main/ci/tasks/bbr-s3-config-validator-build/task.yml
    input_mapping:
      version: release-candidate-version
      repo: main
  - put: release-candidate-version
    params:
      file: release-candidate-version/number
  - put: bbr-artefacts
    params: { file: bbr-build/bbr-*.tar }
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: run-drats
  serial: true
  plan:
  - get: cf-deployment
  - get: cf-deployment-concourse-tasks
  - get: disaster-recovery-acceptance-tests
  - get: image-cryogenics-essentials
  - get: bbr-artefacts
    trigger: true
    passed:
    - build-rc
  - put: cf-deployment-env
    attempts: *number_of_claim_env_retries
    timeout: 6h
    params:
      action: create
      duration: 24h
      resource: cf-deployment-env
      timeout: 6h
  - task: deploy-backup-restore-components
    image: image-cryogenics-essentials
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
      ops-files: cf-deployment
    params:
      OPS_FILES: >
        operations/scale-to-one-az.yml
        operations/use-compiled-releases.yml
        operations/backup-and-restore/enable-backup-restore.yml
        operations/enable-nfs-volume-service.yml
        operations/experimental/disable-interpolate-service-bindings.yml
        operations/experimental/enable-traffic-to-internal-networks.yml
        operations/enable-smb-volume-service.yml
        operations/backup-and-restore/skip-backup-restore-droplets-and-packages.yml
  - task: bosh-run-errand-nfsbrokerpush
    image: image-cryogenics-essentials
    attempts: 5
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: nfsbrokerpush
  - task: bosh-run-errand-smbbrokerpush
    image: image-cryogenics-essentials
    attempts: 5
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: smbbrokerpush
  - load_var: pooled-env
    file: cf-deployment-env/metadata
    format: json
  - task: update-integration-config
    image: image-cryogenics-essentials
    file: disaster-recovery-acceptance-tests/ci/tasks/update-integration-config/task.yml
    input_mapping:
      integration-configs: disaster-recovery-acceptance-tests
    params:
      SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
      JUMPBOX_PRIVATE_KEY: ((.:pooled-env.bosh.jumpbox_private_key))
      CREDHUB_CLIENT: ((.:pooled-env.bosh.credhub_client))
      CREDHUB_SECRET: ((.:pooled-env.bosh.credhub_secret))
      CREDHUB_CA_CERT: ((.:pooled-env.bosh.credhub_ca_cert))
      CREDHUB_SERVER: ((.:pooled-env.bosh.credhub_server))
      CREDHUB_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_ENVIRONMENT: ((.:pooled-env.bosh.bosh_environment))
      BOSH_CA_CERT: ((.:pooled-env.bosh.bosh_ca_cert))
      BOSH_ALL_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_CLIENT: ((.:pooled-env.bosh.bosh_client))
      BOSH_CLIENT_SECRET: ((.:pooled-env.bosh.bosh_client_secret))
  - task: acceptance-tests
    image: image-cryogenics-essentials
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
      bbr-binary-release: bbr-artefacts
    params:
      CONFIG_FILE_PATH: ci/integration_config.json
      CF_DIAL_TIMEOUT: 300
  - put: cf-deployment-env
    params:
      action: release
      resource: cf-deployment-env

- name: run-b-drats
  serial: true
  plan:
  - in_parallel:
    - get: b-drats
    - get: bbr-artefacts
      trigger: true
      params:
        unpack: true
      passed:
      - build-rc
    - get: cryogenics-ci
      tags: [ broadcom ]
    - get: jammy-stemcell
    - get: image-cryogenics-essentials
  - do:
    - put: tas-env
      attempts: *number_of_claim_env_retries
      timeout: 6h
      params:
        action: create
        duration: 24h
        resource: tas-env
        timeout: 6h
    - in_parallel:
      - task: create-b-drats-config
        image: image-cryogenics-essentials
        file: cryogenics-ci/tasks/toolsmiths/generate-b-drats-config-from-tas-env/task.yml
        input_mapping:
          repo: cryogenics-ci
          env: tas-env
          stemcell: jammy-stemcell
        params:
          INCLUDE_DEPLOYMENT_TESTCASE: true
          INCLUDE_TRUNCATE_DB_BLOBSTORE_TESTCASE: false
          INCLUDE_CREDHUB_TESTCASE: false
          TIMEOUT_IN_MINUTES: 2_880 #! 48h
        output_mapping:
          config: b-drats-config
      - load_var: env-metadata
        file: tas-env/metadata
        format: json
    - task: run-b-drats
      image: image-cryogenics-essentials
      file: b-drats/ci/tasks/run-b-drats/task.yml
      privileged: true
      input_mapping:
        bosh-disaster-recovery-acceptance-tests: b-drats
        bbr-binary-release: bbr-artefacts
        b-drats-integration-config: b-drats-config
      params:
        JUMPBOX_IP: ((.:env-metadata.ops_manager_public_ip))
        JUMPBOX_PRIVATE_KEY: ((.:env-metadata.ops_manager_private_key))
        JUMPBOX_USER: ubuntu
        BBR_BINARY: bbr-binary-release/releases/bbr
        SSH_ALIVE_INTERVAL: 60 #! in seconds
        GINKGO_TIMEOUT: 48h0m0s #! 48h to be consistent with TIMEOUT_IN_MINUTES in the b-drats test config from the previous task.
    ensure:
      put: tas-env
      params:
        action: release
        resource: tas-env

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-month
      trigger: true
    - get: main
      passed:
      - build-rc
    - get: bbr-artefacts
      passed:
      - run-drats
      - run-b-drats
    - get: s3-config-validator-artefacts
      passed:
      - build-rc
    - get: release-candidate-version
      passed:
      - build-rc

- name: publish-to-github
  serial: true
  serial_groups:
  - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
  - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: cryogenics-ci
      passed: [ run-b-drats ]
      tags: [ broadcom ]
    - get: main
      trigger: true
      passed:
      - check-for-changes
    - get: bbr-artefacts
      passed:
      - check-for-changes
      params:
        unpack: true
    - get: s3-config-validator-artefacts
      params:
        unpack: true
      passed:
      - check-for-changes
    - get: release-candidate-version
      params:
        bump: final
      passed:
      - check-for-changes
    - get: image-cryogenics-essentials
  - load_var: version-number
    file: release-candidate-version/number
  - task: promote-rc-binaries
    image: image-cryogenics-essentials
    file: main/ci/tasks/promote-release-candidate/task.yml
    input_mapping:
      version: release-candidate-version
      bbr-rc-artefacts: bbr-artefacts
      s3-config-validator-rc-artefacts: s3-config-validator-artefacts
      repo: main
  - put: release-version
    params:
      file: release-candidate-version/number
  - put: release-candidate-version
    params:
      bump: patch
      pre: rc
  - put: build-version
    params:
      bump: patch
      pre: build
  - task: create-release-notes
    image: image-cryogenics-essentials
    file: cryogenics-ci/tasks/release-automation/release-notes/task.yml
    input_mapping:
      git-repo: main
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    image: image-cryogenics-essentials
    file: cryogenics-ci/tasks/release-automation/format-release-notes/task.yml
    input_mapping:
      template-folder: cryogenics-ci
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      VERSION: ((.:version-number))
      TEMPLATE_PATH: tasks/release-automation/release-notes-templates/docs-release-notes-auto.md.erb
  - put: bbr-release
    params:
      name: release-version/number
      tag: release-version/number
      tag_prefix: v
      body: release-notes/release-notes.md
      globs:
      - promoted-artefacts/bbr*
    on_success:
      do:
      - load_var: github-release-url
        file: bbr-release/url
      - put: gchat-notification
        inputs: []
        params:
          text: |
            *BBR CLI*: version `((.:version-number))` has been published to github!
            Next steps: Review the release notes <((.:github-release-url))|here>.

- name: update-homebrew-formula
  serial: true
  plan:
  - in_parallel:
    - get: homebrew-tap
    - get: bbr-release
      passed:
      - publish-to-github
      trigger: true
    - get: main
      passed:
      - publish-to-github
    - get: image-cryogenics-essentials
  - task: update-homebrew-formula
    image: image-cryogenics-essentials
    file: main/ci/tasks/bbr-update-homebrew-formula/task.yml
    input_mapping:
      bbr-release: bbr-release
      homebrew-tap: homebrew-tap
      bosh-backup-and-restore: main
  - put: homebrew-tap
    params:
      repository: updated-homebrew-tap
      rebase: true

- name: publish-dev-internal-to-rmt
  old_name: publish-to-rmt
  plan:
  - in_parallel:
    - get: main
      trigger: true
      passed: [ publish-to-github ]
    - get: bbr-artefacts
      passed: [ publish-to-github ]
    - get: s3-config-validator-artefacts
      params:
        unpack: true
      passed: [ publish-to-github ]
    - get: release-version
      passed: [ publish-to-github ]
    - get: gormt-repo
      tags: [ broadcom ]
    - get: bosh-ecosystem-registry-image
    - get: bosh-ecosystem-concourse
      tags: [ broadcom ]
  - load_var: version-number
    file: release-version/number
    reveal: true
  - task: build-release-config
    file: main/ci/tasks/build-release-config/task.yml
    image: bosh-ecosystem-registry-image
    params:
      RELEASE_CONTACT: *RMT_RELEASE_CONTACT
      RELEASE_TITLE: BOSH Backup and Restore
      RELEASE_PRODUCT_NAME: BOSH Backup and Restore
      RELEASE_DISPLAY_GROUP: BOSH Backup and Restore
      RELEASE_TYPE: Release Update / MP
      RELEASE_STATUS: Dev/Internal
      RELEASE_PRODUCT_SLUG: p-bosh-backup-and-restore
      RELEASE_VERSION: ((.:version-number))
  - task: create-internal-rmt-release
    image: bosh-ecosystem-registry-image
    tags: [ broadcom ]
    file: gormt-repo/concourse_examples/tasks/create-release.yml
    params:
      <<: *rmt_params
  - task: update-file-descriptions
    attempts: 5
    image: bosh-ecosystem-registry-image
    tags: [ broadcom ]
    file: gormt-repo/concourse_examples/tasks/release-file-update.yml
    params:
      <<: *rmt_params
    input_mapping:
      release-update-config: release-config
  - task: release-get
    attempts: 5
    image: bosh-ecosystem-registry-image
    tags: [ broadcom ]
    file: gormt-repo/concourse_examples/tasks/release-get.yml
    params:
      <<: *rmt_params
      OUTPUT_FORMAT: yaml
    output_mapping:
      release-retrieved: rmt-release-config
#!  - task: make-config-updates-for-ga
#!    image: bosh-ecosystem-registry-image
#!    tags: [ broadcom ]
#!    file: bosh-ecosystem-concourse/tasks/rmt/make-config-updates-for-ga.yml
#!    params:
#!      RMT_CONTACT_EMAIL: *RMT_RELEASE_CONTACT
#!  - task: update-file-ga-status
#!    attempts: 5
#!    image: bosh-ecosystem-registry-image
#!    tags: [ broadcom ]
#!    file: gormt-repo/concourse_examples/tasks/release-file-update.yml
#!    params:
#!      <<: *rmt_params
#!    input_mapping:
#!      release-update-config: rmt-release-file-update-config
#!  - task: update-release-ga-status
#!    attempts: 5
#!    image: bosh-ecosystem-registry-image
#!    tags: [ broadcom ]
#!    file: gormt-repo/concourse_examples/tasks/update-release.yml
#!    params:
#!      <<: *rmt_params
#!    input_mapping:
#!      release-update-config: rmt-release-update-config
#!  - put: gchat-notification
#!    inputs: []
#!    params:
#!      text: |
#!          *BBR CLI*: version `((.:version-number))` has been published to RMT!


- name: claim-env
  plan:
  - in_parallel:
      steps:
      - get: latest-pull-request
        trigger: true
      - get: cryogenics-ci
        tags: [ broadcom ]
      - put: environment
        attempts: *number_of_claim_env_retries
        timeout: 6h
        params:
          action: create
          duration: 24h
          resource: environment
          timeout: 6h
      - put: additional-environment
        attempts: *number_of_claim_env_retries
        timeout: 6h
        params:
          action: create
          duration: 24h
          resource: additional-environment
          timeout: 6h

- name: unclaim-env
  plan:
  - in_parallel:
      steps:
      - get: latest-pull-request
        trigger: true
        passed:
        - system-test-deployment
        - system-test-director
      - get: environment
        passed:
        - system-test-deployment
        - system-test-director
      - get: additional-environment
        passed:
        - system-test-deployment
  - put: environment
    params:
      action: release
      resource: environment
  - put: additional-environment
    params:
      action: release
      resource: additional-environment

- name: bump-deps-bbr-cli
  plan:
  - in_parallel:
    - get: every-monday
      trigger: true
    - get: bosh-backup-and-restore
      resource: main
    - get: golang-release
    - get: golang-image
  - task: bump-deps
    file: golang-release/ci/tasks/shared/bump-deps.yml
    input_mapping:
      input_repo: bosh-backup-and-restore
    output_mapping:
      output_repo: bosh-backup-and-restore
  - task: test-unit
    file: bosh-backup-and-restore/ci/tasks/test-unit/task.yml
    image: golang-image
  - put: main
    params:
      repository: bosh-backup-and-restore
      rebase: true

- name: bump-deps-s3-config-validator
  plan:
  - in_parallel:
    - get: every-monday
      trigger: true
    - get: bosh-backup-and-restore
      resource: main
    - get: golang-release
    - get: golang-image
  - task: bump-deps
    file: golang-release/ci/tasks/shared/bump-deps.yml
    input_mapping:
      input_repo: bosh-backup-and-restore
    output_mapping:
      output_repo: bosh-backup-and-restore
    params:
      SOURCE_PATH: s3-config-validator/src/
  - task: test-unit-s3-config-validator
    file: bosh-backup-and-restore/ci/tasks/test-unit-s3-config-validator/task.yml
    image: golang-image
  - put: main
    params:
      repository: bosh-backup-and-restore
      rebase: true

- name: govulncheck
  plan:
  - in_parallel:
    - get: main
      trigger: true
    - get: every-day
      trigger: true
    - get: image-cryogenics-essentials
  - task: govulncheck
    image: image-cryogenics-essentials
    config:
      platform: linux
      inputs:
      - name: main
        path: bosh-backup-and-restore
      run:
        path: /usr/bin/bash
        args:
        - -c
        - |
          set -ex
          set -o pipefail

          pushd "bosh-backup-and-restore"
            for dir in $(find . -name go.mod | xargs -n1 dirname); do
              pushd "$dir"
                go run golang.org/x/vuln/cmd/govulncheck@latest  -test ./...
              popd
            done
          popd

- name: build-bbr-pcf-pipeline-tasks
  old_name: build-bbr-pcf-pipeline-tasks-rc
  serial: true
  plan:
  - in_parallel:
    - get: every-monday
      trigger: true
    - get: ubuntu-lts
      params:
        format: oci
    - get: bbr-pcf-pipeline-tasks
      trigger: true
    - get: oci-build-task-registry-image
  - task: build-image
    privileged: true
    #! It is possible that building an image fails because we hit GH API rate limits.
    attempts: 3
    image: oci-build-task-registry-image
    config:
      platform: linux
      run:
        path: build
      inputs:
      - name: bbr-pcf-pipeline-tasks
      - name: ubuntu-lts
      outputs:
      - name: image
      params:
        CONTEXT: bbr-pcf-pipeline-tasks/docker
        IMAGE_ARG_BASE_IMAGE: ubuntu-lts/image.tar
        UNPACK_ROOTFS: true
      output_mapping: {image: image-bbr-pcf-pipeline-tasks}
  - task: test-for-required-binaries
    image: image
    config:
      platform: linux
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          which om
          which jq
          which bosh
          which ssh
          which fly
          which nc
  - task: write-tag-file
    image: image
    config:
      platform: linux
      outputs:
      - name: tag_file
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          mkdir -p tag_file/
          echo "final" > tag_file/tag
  - put: bbr-pcf-pipeline-tasks-final
    params:
      image: image/image.tar
      additional_tags: tag_file/tag
