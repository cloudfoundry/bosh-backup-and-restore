---
maru-bosh-env: &maru-bosh-env
  BOSH_ENVIRONMENT: "((infrastructure/bosh-director.director_url))"
  BOSH_CLIENT: "((infrastructure/bosh-director.director_username))"
  BOSH_CLIENT_SECRET: "((infrastructure/bosh-director.director_password))"
  BOSH_CA_CERT: "((infrastructure/bosh-director.director_ca_cert))"
  BOSH_GW_HOST: "((infrastructure/bosh-director.jumpbox_host)):22"
  BOSH_GW_USER: jumpbox
  BOSH_GW_PRIVATE_KEY: "((infrastructure/bosh-director.jumpbox_ssh_key))"

maru-lite-bosh-env: &maru-lite-bosh-env
  BOSH_ENVIRONMENT: "((infrastructure/bosh-lite-director.director_url))"
  BOSH_CLIENT: "((infrastructure/bosh-lite-director.director_username))"
  BOSH_CLIENT_SECRET: "((infrastructure/bosh-lite-director.director_password))"
  BOSH_CA_CERT: "((infrastructure/bosh-lite-director.director_ca_cert))"
  BOSH_GW_USER: jumpbox
  BOSH_GW_HOST: "((infrastructure/bosh-lite-director.jumpbox_host)):22"
  BOSH_GW_PRIVATE_KEY: "((infrastructure/bosh-lite-director.jumpbox_ssh_key))"

test-bosh-director-ip: &test-bosh-director-ip 10.0.255.5
test-bosh-director-deployment: &test-bosh-director-deployment test-bosh-director

toolsmiths_api_worker: &toolsmiths_api_worker nimbus-worker
tanzunet_product_name: &tanzunet_product_name p-bosh-backup-and-restore

groups:
- name: all
  jobs:
  - unit-integration
  - system-test-deployment
  - system-test-director
  - build-rc
  - run-drats
  - run-b-drats
  - update-tracker
  - publish-to-github
  - upload-to-tanzunet
  - request-osl
  - publish-ga
  - update-homebrew-formula
  - test-build-s3-config-validator
  - validate-aws-s3-config

- name: pull-requests
  jobs:
  - unit-integration
  - test-build-s3-config-validator
  - validate-aws-s3-config
  - system-test-deployment
  - system-test-director
  - update-tracker

- name: release
  jobs:
  - build-rc
  - run-drats
  - run-b-drats
  - publish-to-github
  - upload-to-tanzunet
  - request-osl
  - publish-ga
  - update-homebrew-formula

resource_types:
- name: github-release
  type: registry-image
  source: {repository: concourse/github-release-resource}

- name: gitgat
  type: docker-image
  source:
    repository: cryogenics/concourse-gitgat-resource
    tag: latest

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: bosh-deployment-resource
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: pcf-pool
  type: registry-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource
    tag: latest

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: pull-request
  type: docker-image
  source:
    repository: cryogenics/pr-queue-resource

resources:
- name: every-3-weeks
  type: gitgat
  source:
    uri: https://github.com/cloudfoundry-incubator/bosh-backup-and-restore
    branch: master
    since: 3 weeks

- name: bbr-director-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore-test-releases.git
    private_key: ((github.ssh_key))
    branch: master
    paths:
    - test-bosh-backup-and-restore-release

- name: bbr-deployment-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore-test-releases.git
    private_key: ((github.ssh_key))
    branch: master
    paths:
    - redis-test-release
    - lock-ordering-release
    - many-bbr-jobs-release

- name: latest-pull-request
  icon: source-pull
  type: pull-request
  source:
    base_branch: master
    repository: cloudfoundry-incubator/bosh-backup-and-restore
    access_token: ((github.access_token))
    disable_forks: true

- name: main
  icon: github
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore.git
    private_key: ((github.ssh_key))
    branch: master
    disable_git_lfs: true

- name: homebrew-tap
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/homebrew-tap.git
    branch: master
    private_key: ((homebrew_ci_bot.private_key))

- name: tanzunet
  type: pivnet
  icon: alpha-p-box
  source:
    api_token: ((pivnet.api_token))
    product_slug: *tanzunet_product_name
    copy_metadata: true

- name: bbr-artefacts
  type: s3
  icon: aws
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)\.tar
    access_key_id: ((aws_credentials.access_key_id))
    secret_access_key: ((aws_credentials.secret_access_key))

- name: bbr-release
  type: github-release
  icon: github
  source:
    repository: bosh-backup-and-restore
    user: cloudfoundry-incubator
    access_token: ((github.access_token))
    release: true

- name: release-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/final
    json_key: ((gcp/service_accounts/bucket_owner.json_key))
    initial_version: 1.9.13
    driver: gcs

- name: release-candidate-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/release-candidate
    json_key: ((gcp/service_accounts/bucket_owner.json_key))
    initial_version: 1.9.13-rc.1
    driver: gcs

- name: build-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/build
    json_key: ((gcp/service_accounts/bucket_owner.json_key))
    initial_version: 1.9.13-build.516
    driver: gcs

- name: xenial-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

- name: bionic-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-bionic-go_agent

- name: bosh-deployment
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-deployment.git

- name: test-bosh-director-deployment
  type: bosh-deployment-resource
  source:
    deployment: *test-bosh-director-deployment
    skip_check: true

- name: s3-config-validator-artefacts
  type: gcs
  icon: google
  source:
    bucket: cryo-bbr-s3-config-validator-test-artifacts
    json_key: ((gcp/service_accounts/bbr_bucket_owner.json_key))
    regexp: bbr-s3-config-validator.(.*).tgz

- name: pcf-2-11-pool
  type: pcf-pool
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: us_2_11_lts2

- name: cryogenics-ci
  type: git
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: ((github.ssh_key))
    branch: main

- name: slack-cryo-notification
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git
    tag_filter: v12.*

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: main

- name: cf-deployment-env
  icon: pool
  type: pcf-pool
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: cf-deployment

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests
    branch: main

- name: b-drats
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/bosh-disaster-recovery-acceptance-tests
    branch: 179721127-make-b-drats-toolsmiths-compatible

jobs:
- name: unit-integration
  serial: true
  plan:
  - in_parallel:
    - get: latest-pull-request
      trigger: true
  - task: test
    file: latest-pull-request/ci/tasks/bbr-unit/task.yml
    params:
      DOCKER_HOST_IP: ((docker_host.ip))
      DOCKER_HOST: ((docker_host.uri))
      DOCKER_HOST_SSH_KEY: ((docker_host.ssh_key))
    input_mapping:
      bosh-backup-and-restore: latest-pull-request

- name: system-test-director
  serial: true
  serial_groups: [system-test-director]
  plan:
  - in_parallel:
    - get: latest-pull-request
      passed: [unit-integration]
      trigger: true
    - get: bosh-deployment
    - get: bbr-director-test-releases
    - get: xenial-stemcell
  - task: generate-bosh-deployment-source-file
    file: latest-pull-request/ci/tasks/bosh-deployment-resource-source-file-adapter/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      <<: *maru-bosh-env
  - put: deploy-fake-director
    resource: test-bosh-director-deployment
    params:
      manifest: latest-pull-request/fixtures/fake-director.yml
      stemcells: [xenial-stemcell/*.tgz]
      source_file: source-file/source-file.yml
      vars:
        deployment-name: test-bosh-director
        jumpbox-public-key: ((test_bosh_director.public_key))
        test_release_path: /tmp/build/put/bbr-director-test-releases/test-bosh-backup-and-restore-release
        internal_ip: *test-bosh-director-ip
  - task: system-test-director
    file: latest-pull-request/ci/tasks/bbr-system-director/task.yml
    privileged: true
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      CREDHUB_SERVER: "((infrastructure/bosh-director.credhub_server))"
      CREDHUB_CLIENT: "((infrastructure/bosh-director.credhub_client))"
      CREDHUB_SECRET: "((infrastructure/bosh-director.credhub_secret))"
      CREDHUB_CA_CERT: "((infrastructure/bosh-director.credhub_ca_cert))"
      DIRECTOR_HOST: *test-bosh-director-ip
      DIRECTOR_SSH_KEY: ((test_bosh_director.private_key))
      DIRECTOR_SSH_USERNAME: jumpbox
      BOSH_DEPLOYMENT: *test-bosh-director-deployment
      GITHUB_SDK_PRIVATE_KEY: ((github-sdk.key))
      <<: *maru-bosh-env
  - put: delete-system-director
    resource: test-bosh-director-deployment
    params:
      delete:
        enabled: true
      source_file: source-file/source-file.yml

- name: system-test-deployment
  serial: true
  plan:
  - in_parallel:
    - get: bbr-deployment-test-releases
      trigger: true
    - get: latest-pull-request
      trigger: true
      passed: [unit-integration]
  - in_parallel:
    - task: upload-redis-test-release-maru-lite
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: redis-test-release
        <<: *maru-lite-bosh-env
    - task: upload-many-bbr-jobs-release-lite-bosh-uaa
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *maru-lite-bosh-env
    - task: upload-many-bbr-jobs-release-maru
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *maru-bosh-env
    - task: upload-redis-test-release-maru-bosh
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: redis-test-release
        <<: *maru-bosh-env
    - task: upload-redis-test-release-lite-bosh-uaa
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: redis-test-release
        <<: *maru-lite-bosh-env
    - task: upload-lock-ordering-release-lite-bosh-uaa
      file: latest-pull-request/ci/tasks/bbr-upload-system-test-releases/task.yml
      input_mapping:
        bosh-backup-and-restore: latest-pull-request
      params:
        RELEASE_NAME: lock-ordering-release
        <<: *maru-lite-bosh-env
  - task: system-deployment-with-uaa
    file: latest-pull-request/ci/tasks/bbr-system-deployment/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      GITHUB_SDK_PRIVATE_KEY: ((github-sdk.key))
      <<: *maru-lite-bosh-env

- name: test-build-s3-config-validator
  serial_groups:
    - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: latest-pull-request
      trigger: true
    - get: build-version
      params: {pre: build}
  - task: unit-test
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-unit-test/task.yml
    params:
      AWS_ACCESS_KEY: ((s3_validator_test_bucket.access_key))
      AWS_SECRET_KEY: ((s3_validator_test_bucket.secret_key))
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: e2e-test
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-e2e-test/task.yml
    params:
      AWS_ACCESS_KEY: ((s3_validator_test_bucket.access_key))
      AWS_SECRET_KEY: ((s3_validator_test_bucket.secret_key))
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: build
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-build/task.yml
    input_mapping:
      version: build-version
      repo: latest-pull-request
  - put: build-version
    params: { file: build-version/number }
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: validate-aws-s3-config
  serial: true
  plan:
  - in_parallel:
    - put: env-pool
      resource: pcf-2-11-pool
      params:
        action: claim
    - get: s3-config-validator-artefacts
      passed: [test-build-s3-config-validator]
      trigger: true
    - get: latest-pull-request
      passed: [test-build-s3-config-validator]
  - task: enable-backup-prepare-pas
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-enable-backup-prepare-pas/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      SKIP_APPLY_CHANGES: true
  - task: enable-aws-s3-filestore
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-enable-aws-s3-filestore/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      ENDPOINT: ((s3_validator_aws.endpoint))
      BUILDPACKS_BUCKET: ((s3_validator_aws.live_bucket))
      DROPLETS_BUCKET: ((s3_validator_aws.live_bucket))
      PACKAGES_BUCKET: ((s3_validator_aws.live_bucket))
      RESOURCES_BUCKET: ((s3_validator_aws.live_bucket))
      BACKUP_BUCKET: ((s3_validator_aws.backup_bucket))
      BACKUP_REGION: ((s3_validator_aws.backup_region))
      ACCESS_KEY: ((s3_validator_aws.secret_key_id))
      SECRET_KEY: ((s3_validator_aws.secret_key))
      REGION: ((s3_validator_aws.region))
      SKIP_APPLY_CHANGES: false
  - task: move-and-run-validator
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-validate-aws-s3-config/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
      env-pool: env-pool
      bbr-s3-config-validator-test-artifacts: s3-config-validator-artefacts
  ensure:
    put: pcf-2-11-pool
    params:
      action: unclaim
      env_file: env-pool/metadata

- name: update-tracker
  plan:
  - in_parallel:
    - get: latest-pull-request
      passed: [system-test-deployment, system-test-director, validate-aws-s3-config]
      trigger: true
    - get: cryogenics-ci
  - put: latest-pull-request
    params:
      merge: true

- name: build-rc
  serial_groups:
    - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: main
      trigger: true
    - get: release-candidate-version
      params:
        pre: rc
    - get: next-release-version
      resource: release-candidate-version
      params:
        bump: final
  - task: build-bbr
    file: main/ci/tasks/bbr-build/task.yml
    params:
      GITHUB_SDK_PRIVATE_KEY: ((github-sdk.key))
    input_mapping:
      release-version: next-release-version
      release-candidate-version: release-candidate-version
      bosh-backup-and-restore: main
  - task: build-s3-config-validator
    file: main/ci/tasks/bbr-s3-config-validator-build/task.yml
    input_mapping:
      version: release-candidate-version
      repo: main
  - put: release-candidate-version
    params:
      file: release-candidate-version/number
  - put: bbr-artefacts
    params: {file: bbr-build/bbr-*.tar}
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: run-drats
  serial: true
  plan:
  - get: cf-deployment
  - get: cf-deployment-concourse-tasks
  - get: disaster-recovery-acceptance-tests
  - get: bbr-artefacts
    trigger: true
    passed:
      - build-rc
  - put: cf-deployment-env
    params:
      action: claim
  - task: deploy-backup-restore-components
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
      ops-files: cf-deployment
    params:
      OPS_FILES: >
        operations/scale-to-one-az.yml
        operations/use-compiled-releases.yml
        operations/backup-and-restore/enable-backup-restore.yml
        operations/enable-nfs-volume-service.yml
        operations/experimental/disable-interpolate-service-bindings.yml
        operations/experimental/enable-traffic-to-internal-networks.yml
        operations/experimental/enable-smb-volume-service.yml
        operations/backup-and-restore/skip-backup-restore-droplets-and-packages.yml
  - task: bosh-run-errand-nfsbrokerpush
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: nfsbrokerpush
  - task: bosh-run-errand-smbbrokerpush
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: smbbrokerpush
  - load_var: pooled-env
    file: cf-deployment-env/metadata
    format: json
  - task: update-integration-config
    file: disaster-recovery-acceptance-tests/ci/tasks/update-integration-config/task.yml
    input_mapping:
      integration-configs: disaster-recovery-acceptance-tests
    params:
      SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
      JUMPBOX_PRIVATE_KEY: ((.:pooled-env.bosh.jumpbox_private_key))
      CREDHUB_CLIENT: ((.:pooled-env.bosh.credhub_client))
      CREDHUB_SECRET: ((.:pooled-env.bosh.credhub_secret))
      CREDHUB_CA_CERT: ((.:pooled-env.bosh.credhub_ca_cert))
      CREDHUB_SERVER: ((.:pooled-env.bosh.credhub_server))
      CREDHUB_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_ENVIRONMENT: ((.:pooled-env.bosh.bosh_environment))
      BOSH_CA_CERT: ((.:pooled-env.bosh.bosh_ca_cert))
      BOSH_ALL_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_CLIENT: ((.:pooled-env.bosh.bosh_client))
      BOSH_CLIENT_SECRET: ((.:pooled-env.bosh.bosh_client_secret))
  - task: acceptance-tests
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
      bbr-binary-release: bbr-artefacts
    params:
      CONFIG_FILE_PATH: ci/integration_config.json
      CF_DIAL_TIMEOUT: 300
  - put: cf-deployment-env
    params:
      action: unclaim
      env_file: cf-deployment-env/metadata

- name: run-b-drats
  serial: true
  plan:
    - in_parallel:
      - get: b-drats
      - get: bbr-artefacts
        trigger: true
        params:
          unpack: true
        passed: 
          - build-rc
      - get: cryogenics-ci
      - get: bionic-stemcell
    - do:
      - put: env-pool
        resource: pcf-2-11-pool
        params:
          action: claim
      - in_parallel:
        - task: create-b-drats-config
          file: cryogenics-ci/tasks/toolsmiths/generate-b-drats-config-from-tas-env/task.yml
          input_mapping:
            repo: cryogenics-ci
            env: env-pool
            stemcell: bionic-stemcell
          params:
            INCLUDE_DEPLOYMENT_TESTCASE: true
            INCLUDE_TRUNCATE_DB_BLOBSTORE_TESTCASE: false
            INCLUDE_CREDHUB_TESTCASE: false
            TIMEOUT_IN_MINUTES: 720
          output_mapping:
            config: b-drats-config
        - load_var: env-metadata
          file: env-pool/metadata
          format: json
      - task: run-b-drats
        file: b-drats/ci/tasks/run-b-drats/task.yml
        privileged: true
        input_mapping:
          bosh-disaster-recovery-acceptance-tests: b-drats
          bbr-binary-release: bbr-artefacts
          b-drats-integration-config: b-drats-config
        params:
          JUMPBOX_IP: ((.:env-metadata.ops_manager_public_ip))
          JUMPBOX_PRIVATE_KEY: ((.:env-metadata.ops_manager_private_key))
          JUMPBOX_USER: ubuntu
          BBR_BINARY: bbr-binary-release/releases/bbr
      ensure:
        put: pcf-2-11-pool
        params:
          action: unclaim
          env_file: env-pool/metadata

- name: publish-to-github
  serial: true
  serial_groups:
    - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
    - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: every-3-weeks
      trigger: true
    - get: cryogenics-ci
    - get: main
      passed: [build-rc]
    - get: bbr-artefacts
      passed:
        - run-drats
        - run-b-drats
      params:
        unpack: true
    - get: s3-config-validator-artefacts
      params:
        unpack: true
      passed:
        - build-rc
    - get: release-candidate-version
      params: 
        bump: final
      passed:
        - build-rc
  - load_var: version-number
    file: release-candidate-version/number
  - task: promote-rc-binaries
    file: main/ci/tasks/promote-release-candidate/task.yml
    input_mapping:
      version: release-candidate-version
      bbr-rc-artefacts: bbr-artefacts
      s3-config-validator-rc-artefacts: s3-config-validator-artefacts
      repo: main
  - put: release-version
    params:
      file: release-candidate-version/number
  - put: release-candidate-version
    params:
      bump: patch
      pre: rc
  - put: build-version
    params:
      bump: patch
      pre: build
  - task: create-release-notes
    file: cryogenics-ci/tasks/release-automation/release-notes/task.yml
    input_mapping:
      git-repo: main
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    file: cryogenics-ci/tasks/release-automation/format-release-notes/task.yml
    input_mapping:
      template-folder: cryogenics-ci
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      VERSION: ((.:version-number))
      TEMPLATE_PATH: tasks/release-automation/release-notes-templates/docs-release-notes-auto.md.erb
  - put: bbr-release
    params:
      name: release-version/number
      tag: release-version/number
      tag_prefix: v
      body: release-notes/release-notes.md
      globs:
      - promoted-artefacts/bbr*
    on_success:
      do:
      - load_var: github-release-url
        file: bbr-release/url
      - put: slack-cryo-notification
        params:
          text: |
            A new release for $BUILD_PIPELINE_NAME has been published!
            Release `((.:version-number))` is now available <((.:github-release-url))|here>
            View the pipeline <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|here>

- name: upload-to-tanzunet
  serial: true
  plan:
  - in_parallel:
    - get: cryogenics-ci
    - get: release-version
      passed:
      - publish-to-github
    - get: main
      passed:
      - publish-to-github
    - get: bbr-release
      trigger: true
      params:
        globs:
          - bbr-*
      passed:
      - publish-to-github
  - load_var: version-number
    file: release-version/number
  - task: generate-artifact-and-metadata
    file: main/ci/tasks/prepare-artefacts-for-pivnet/task.yml
    input_mapping:
      version: release-version
      promoted-artefacts: bbr-release
      repo: main
    params:
      TEMPLATE_PATH: ci/tasks/prepare-artefacts-for-pivnet/release.yml.erb
      VERSION_PATH: number
  - put: tanzunet
    params:
      metadata_file: pivnet-artefacts/release.yml
      s3_filepath_prefix: product-files/bosh-backup-restore
      file_glob: pivnet-artefacts/bbr-*
      override: true
  - task: create-story
    file: cryogenics-ci/tasks/tracker-automation/create-story/task.yml
    input_mapping:
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      TRACKER_API_TOKEN: ((tracker.api_token))
      TRACKER_PROJECT_ID: ((tracker.project_id))
      STORY_TITLE: '**[BBR]** Publish ((.:version-number))'
      STORY_ESTIMATE: 1
      STORY_LABELS: 'bbr'
      STORY_BLOCKERS: '{"description":"OSL file"}'

- name: update-homebrew-formula
  serial: true
  plan:
  - in_parallel:
    - get: homebrew-tap
    - get: bbr-release
      passed:
        - publish-to-github
      trigger: true
    - get: main
      passed:
      - publish-to-github
  - task: update-homebrew-formula
    file: main/ci/tasks/bbr-update-homebrew-formula/task.yml
    input_mapping:
      bbr-release: bbr-release
      homebrew-tap: homebrew-tap
      bosh-backup-and-restore: main
  - put: homebrew-tap
    params:
      repository: updated-homebrew-tap
      rebase: true

- name: request-osl
  plan:
  - get: cryogenics-ci
  - get: release-version
    trigger: true
    passed:
    - upload-to-tanzunet
  - load_var: version-number
    file: release-version/number
  - task: create-osm-release
    file: cryogenics-ci/tasks/release-automation/create-osm-release/task.yml
    input_mapping:
      repo: cryogenics-ci
    tags:
    - *toolsmiths_api_worker
    params:
      PRODUCT_NAME: *tanzunet_product_name
      VERSION: ((.:version-number))
      OSM_API_KEY: ((osm.api_key))

- name: publish-ga
  serial: true
  plan:
  - in_parallel:
    - get: cryogenics-ci
    - get: release-version
      passed:
        - request-osl
  - load_var: release-version-number
    file: release-version/number
  - task: download-osl-file
    file: cryogenics-ci/tasks/release-automation/download-osl-file/task.yml
    input_mapping:
      cryogenics-meta: cryogenics-ci
    params:
      PRODUCT_NAME: *tanzunet_product_name
      VERSION: ((.:release-version-number))
      OSM_API_KEY: ((osm.api_key))
      OUTPUT_DIR: osl
    tags:
    - *toolsmiths_api_worker
  - load_var: osl-file-name
    file: osl/name
  - task: add-osl-file-to-release
    file: cryogenics-ci/tasks/release-automation/add-osl-file-to-pivnet/task.yml
    input_mapping:
      cryogenics-meta: cryogenics-ci
    params:
      PRODUCT_NAME: *tanzunet_product_name
      OSL_FILE_NAME: ((.:osl-file-name))
      VERSION: ((.:release-version-number))
      PIVNET_TOKEN: ((pivnet.api_token))
      AWS_PIVNET_BUCKET_PATH: ((pivnet_bucket.bucket_name))
      AWS_ACCESS_KEY_ID: ((pivnet_bucket.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((pivnet_bucket.secret_access_key))
      AWS_PRODUCT_NAME: ((pivnet_bucket.user))
