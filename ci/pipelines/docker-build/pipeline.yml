---
#! This pipeline is set manually
#!
#!  To set the pipeline, run:
#!    fly set-pipeline -p bbr-docker-build -c ci/pipelines/docker-build/pipeline.yml

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************

#! this needs to come first, else all other vars can't be resolved.
#! cerberus creds are required to access the teams vault instance managed by cerberus. The creds have been created manually via the vault-cli targetting the teams cerberus vault. Example steps to create an approle are here: https://developer.hashicorp.com/vault/docs/auth/approle the required value for policies is `restricted-admin` the auth method is mounted on the standard path.
cerberus: &cerberus
  role_id: ((cerberus-auth.role_id))
  secret_id: ((cerberus-auth.secret_id))
cerberus_url: &cerberus_url ((cerberus-auth.url))


secrets:
#! git_token was needed on 2023-09-29 to access PRs. Generated by using github account in lastpass at Shared-Cryogenics/infrastructure-root/github-ci-account
- &github_access_token ((cerberus:github.access_token))
#! git_ssh_key was needed on 2023-09-29 to access private repos. Generated via uploading a public key to github.com
- &github_ssh_key ((cerberus:github.ssh_key)) 

# used to upload images to dockerhub, password is rotated via the account UI
- &dockerhub_username ((cerberus:dockerhub.bbr-username))
- &dockerhub_password ((cerberus:dockerhub.bbr-password))

#! gcr_viewer_key was needed on 2024-03-24 for getting concourse container images from our GCR instance. Generated by using personal creds to log into the mapbu-cryogenics google cloud project.
- &gcr_viewer_key  ((cerberus:gcr.viewer_key))


params:
- &attempts 3

var_sources:
- name: cerberus
  type: vault
  config:
    auth_backend: approle
    auth_params: *cerberus
    url: *cerberus_url
    path_prefix: secret

resources:
- name: ubuntu-lts
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/ubuntu
    tag: latest
    username: _json_key
    password:  *gcr_viewer_key

- name: bbr-pcf-pipeline-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/bbr-pcf-pipeline-tasks.git
    branch: main
    paths: [docker/Dockerfile]

- name: bbr-pcf-pipeline-tasks-final
  type: docker-image
  source:
    tag: final
    repository: pcfplatformrecovery/bbr-pcf-pipeline-tasks
    username: *dockerhub_username
    password: *dockerhub_password

- name: every-monday
  type: time
  icon: timer-outline
  source:
    start: 9:00 AM
    stop: 5:00 PM
    days: [Monday,Friday]
    location: Europe/London

jobs:
- name: build-bbr-pcf-pipeline-tasks
  old_name: build-bbr-pcf-pipeline-tasks-rc
  serial: true
  plan:
  - get: every-monday
    trigger: true
  - get: ubuntu-lts
    params:
      format: oci
  - get: bbr-pcf-pipeline-tasks
    trigger: true
  - task: build-image
    privileged: true
    # It is possible that building an image fails because we hit GH API rate limits.
    attempts: *attempts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/concourse/oci-build-task
          username: _json_key
          password:  *gcr_viewer_key

      run:
        path: build

      inputs:
      - name: bbr-pcf-pipeline-tasks
      - name: ubuntu-lts
      params:
        CONTEXT: bbr-pcf-pipeline-tasks/docker
        BUILD_ARG_REGISTRY: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache
        IMAGE_ARG_BASE_IMAGE: ubuntu-lts/image.tar

      outputs:
      - name: image-bbr-pcf-pipeline-tasks
  - task: test-for-required-binaries
    image: image-bbr-pcf-pipeline-tasks
    config:
      platform: linux
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          which om
          which jq
          which bosh
          which ssh
          which fly
          which nc
  - task: write-tag-file
    image: image-bbr-pcf-pipeline-tasks
    config:
      platform: linux
      outputs:
      - name: tag_file
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          mkdir -p tag_file/
          echo "final" > tag_file/tag
  - put: bbr-pcf-pipeline-tasks-final
    params:
      load: bbr-pcf-pipeline-tasks-rc
      tag_file: tag_file/tag
