---
#! This pipeline is set manually
#!
#!  To set the pipeline, run:
#!    fly set-pipeline -p bbr-docker-build -c ci/pipelines/docker-build/pipeline.yml

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************

#! this needs to come first, else all other vars can't be resolved.
#! cerberus creds are required to access the teams vault instance managed by cerberus. The creds have been created manually via the vault-cli targetting the teams cerberus vault. Example steps to create an approle are here: https://developer.hashicorp.com/vault/docs/auth/approle the required value for policies is `restricted-admin` the auth method is mounted on the standard path.
cerberus: &cerberus
  role_id: ((cerberus-auth.role_id))
  secret_id: ((cerberus-auth.secret_id))
cerberus_url: &cerberus_url ((cerberus-auth.url))

git:
#! git_token was needed on 2023-09-29 to access PRs. Generated by using github account in lastpass at Shared-Cryogenics/infrastructure-root/github-ci-account
  token: &github_access_token ((cerberus:github.access_token))
#! git_ssh_key was needed on 2023-09-29 to access private repos. Generated via uploading a public key to github.com
  ssh_key: &github_ssh_key ((cerberus:github.ssh_key)) 

dockerhub:
  username: &dockerhub_username ((cerberus:dockerhub.bbr-username))
  password: &dockerhub_password ((cerberus:dockerhub.bbr-password))
# used to upload images to dockerhub, password is rotated via the account UI

var_sources:
- name: cerberus
  type: vault
  config:
    auth_backend: approle
    auth_params: *cerberus
    url: *cerberus_url
    path_prefix: secret

resources:
- name: ubuntu-xenial
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/ubuntu
    tag: xenial

- name: bosh-lite-stemcell
  type: s3
  source:
    bucket: bosh-core-stemcells
    region: us-east-1
    regexp: (315\.\d+)/bosh-stemcell-(315\.\d+)-warden-boshlite-ubuntu-xenial-go_agent.tgz

- name: terraform-github-release
  type: github-release
  source:
    user: hashicorp
    repository: terraform
    access_token: *github_access_token
    tag_filter: v0.14.2

- name: bbr-pcf-pipeline-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/bbr-pcf-pipeline-tasks.git
    branch: main
    paths: [docker/Dockerfile]

- name: ci
  type: git
  source:
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore.git
    paths: ["ci"]
    branch: master

- name: backup-and-restore
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    branch: master
    paths: ["ci/images/backup-and-restore/*"]

- name: backup-and-restore-minimal
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    branch: master
    paths: ["ci/images/backup-and-restore-minimal/*"]

- name: backup-and-restore-node-with-ssh
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    paths: ["ci/images/backup-and-restore-node-with-ssh/*"]
    branch: master

- name: backup-and-restore-node-with-ssh-docker-image
  type: docker-image
  source:
    repository: pcfplatformrecovery/backup-and-restore-node-with-ssh
    username: *dockerhub_username
    password: *dockerhub_password

- name: backup-and-restore-minimal-docker-image
  type: docker-image
  source:
    repository: pcfplatformrecovery/backup-and-restore-minimal
    username: *dockerhub_username
    password: *dockerhub_password

- name: backup-and-restore-docker-image
  type: docker-image
  source:
    repository: pcfplatformrecovery/backup-and-restore
    username: *dockerhub_username
    password: *dockerhub_password

- name: bosh-lite-stemcell-docker-image
  type: docker-image
  source:
    repository: pcfplatformrecovery/backup-and-restore-bosh-stemcell
    username: *dockerhub_username
    password: *dockerhub_password

- name: bbr-pcf-pipeline-tasks-final
  type: docker-image
  source:
    tag: final
    repository: pcfplatformrecovery/bbr-pcf-pipeline-tasks
    username: *dockerhub_username
    password: *dockerhub_password

- name: bbr-pcf-pipeline-tasks-rc
  type: docker-image
  source:
    tag: release-candidate
    repository: pcfplatformrecovery/bbr-pcf-pipeline-tasks
    username: *dockerhub_username
    password: *dockerhub_password

- name: every-monday
  type: time
  icon: timer-outline
  source:
    start: 9:00 AM
    stop: 5:00 PM
    days: [Monday,Friday]
    location: Europe/London

jobs:
- name: build-backup-and-restore-minimal
  serial: true
  plan:
  - in_parallel:
    - get: backup-and-restore-minimal
      trigger: true
  - put: backup-and-restore-minimal-docker-image
    params:
      build: backup-and-restore-minimal/ci/images/backup-and-restore-minimal/

- name: build-backup-and-restore
  serial: true
  plan:
  - in_parallel:
    - get: terraform-github-release
      trigger: true
    - get: backup-and-restore
      trigger: true
    - get: ci
    - get: backup-and-restore-minimal-docker-image
      trigger: true
      passed: [build-backup-and-restore-minimal]
      params:
        skip_download: true
  - task: get-terraform-version
    file: ci/ci/tasks/check-terraform-version/task.yml
  - put: backup-and-restore-docker-image
    params:
      build_args_file: dockerbuild-env/env-file.json
      build: backup-and-restore/ci/images/backup-and-restore/
      tag_as_latest: true
      additional_tags: dockerbuild-env/terraform-version

- name: build-backup-and-restore-node-with-ssh
  serial: true
  plan:
  - get: backup-and-restore-node-with-ssh
    trigger: true
  - get: bosh-lite-stemcell-docker-image
    trigger: true
    passed: [build-bosh-lite-stemcell]
    params:
      skip_download: true
  - put: backup-and-restore-node-with-ssh-docker-image
    params:
      build: backup-and-restore-node-with-ssh/ci/images/backup-and-restore-node-with-ssh/

- name: build-bosh-lite-stemcell
  serial: true
  plan:
  - get: bosh-lite-stemcell
    trigger: true
    params:
      unpack: true
  - put: bosh-lite-stemcell-docker-image
    params:
      import_file: bosh-lite-stemcell/image
      tag_file: bosh-lite-stemcell/version
      tag_as_latest: true

- name: build-bbr-pcf-pipeline-tasks-rc
  serial: true
  plan:
  - get: ubuntu-xenial
    trigger: true
  - get: every-monday
    trigger: true
  - get: bbr-pcf-pipeline-tasks
    trigger: true
  - put: bbr-pcf-pipeline-tasks-rc
    params:
      build: bbr-pcf-pipeline-tasks/docker

- name: test-bbr-pcf-pipeline-tasks-rc
  serial: true
  plan:
  - get: bbr-pcf-pipeline-tasks-rc
    trigger: true
    passed: [build-bbr-pcf-pipeline-tasks-rc]
    params:
      skip_download: true
  - task: test-for-required-binaries
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/bbr-pcf-pipeline-tasks
          tag: release-candidate
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          which om
          which jq
          which bosh
          which ssh
          which fly
          which nc

- name: promote-bbr-pcf-pipeline-tasks-rc
  serial: true
  plan:
  - get: bbr-pcf-pipeline-tasks-rc
    trigger: true
    passed: [test-bbr-pcf-pipeline-tasks-rc]
    params:
      save: true
  - task: write-tag-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/bbr-pcf-pipeline-tasks
          tag: release-candidate
      outputs:
      - name: tag_file
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          mkdir -p tag_file/
          echo "final" > tag_file/tag
  - put: bbr-pcf-pipeline-tasks-final
    params:
      load: bbr-pcf-pipeline-tasks-rc
      tag_file: tag_file/tag

