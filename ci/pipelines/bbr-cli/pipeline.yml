---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set the pipeline manually run:
#!    fly set-pipeline -p bbr-cli -c <(ytt -f ci/pipelines/bbr-cli/pipeline.yml --data-values-file ci/pipelines/bbr-cli/values.yml)

#@ load("@ytt:data", "data")


#! ************************************
#! Secrets we need to run this pipeline
#! ************************************
#! this needs to come first, else all other vars can't be resolved.
#! cerberus creds are required to access the teams vault instance managed by cerberus. The creds have been created manually via the vault-cli targetting the teams cerberus vault. Example steps to create an approle are here: https://developer.hashicorp.com/vault/docs/auth/approle the required value for policies is `restricted-admin` the auth method is mounted on the standard path.
cerberus: &cerberus
  role_id: ((cerberus-auth.role_id))
  secret_id: ((cerberus-auth.secret_id))
cerberus_url: &cerberus_url ((cerberus-auth.url))

#! On 2023-11-10 we needed a pivnet admin token to upload new releases to TanzuNet. Accounts with admin priveleges are obtained
#! by asking the tanzuNet team. Auth tokens for the account can be generated via the webui.
pivnet_admin_api_token: &pivnet_admin_api_token ((cerberus:pivnet/cf-lazarus-admin.api_token))

#! On 2023-11-10 we needed we need an API key to OSM to automate OSM operations. This can be obatined by contacting the OSM team.
#! they also are the only people able to rotate it.
osm_api_key: &osm_api_key ((cerberus:osm.api_key))

#! on 2023-10-24 required to have an expected public key available on the fake director deployed in deploy-fake-director. generated via ssh-keygen
jumpbox-public-key: &jumpbox_public_key ((cerberus:bbr-cli/test_bosh_director.public_key))

#! github_ssh_key was needed on 2023-09-25 to merge PRs. Generated by using github account in lastpass at Shared-Cryogenics/infrastructure-root/github-ci-account
github_ssh_key: &github_ssh_key ((cerberus:github.ssh_key))
#! github_token was needed on 2023-09-25 to access PRs. Generated by using github account in lastpass at Shared-Cryogenics/infrastructure-root/github-ci-account
github_access_token: &github_access_token ((cerberus:github.access_token))

aws-access: &aws-access
#! the aws_access_key_id and secret_key were needed on 2023-09-25 to access blobstores and test buckets in the BBRSDK AWS project. Generated using AWS cloudgate here: https://console.cloudgate.vmware.com/ui/#/cloud/116462199383/ou/ou-kw69-imy2w5hl/account/686843836666
  access_key_id: &aws_access_key ((cerberus:bbr/aws_s3_creds.access_key_id))
  secret_access_key: &aws_secret_key ((cerberus:bbr/aws_s3_creds.secret_access_key))
#! aws_role_arn: ! the aws_assumed_role_arn was needed on 2023-09-25 to access blobstores and test buckets in the BBRSDK AWS project. Generated using AWS cloudgate here: https://console.cloudgate.vmware.com/ui/#/cloud/116462199383/ou/ou-kw69-imy2w5hl/account/686843836666
  aws_role_arn: &aws_role_arn ((cerberus:bbr/aws_s3_creds.assumed_role_arn))
AWS_ACCESS: &AWS_ACCESS
  AWS_ACCESS_KEY: *aws_access_key
  AWS_ASSUMED_ROLE_ARN: *aws_role_arn
  AWS_SECRET_KEY: *aws_secret_key
AWS_ACCESS_2: &AWS_ACCESS_2
  ACCESS_KEY: *aws_access_key
  SECRET_KEY: *aws_secret_key
  ROLE_ARN: *aws_role_arn

#! gcp_service_accounts_bucket_owner was needed on 2023-09-25 to access gcs buckets required in this pipeline (e.g. semver resource). It was generated by using personal creds to log into the mapbu-cryogenics GCP project
gcp_service_accounts_bucket_owner: &gcp_service_accounts_bucket_owner ((cerberus:gcp/service_accounts/bucket_owner.json_key))

#! homebrew_ci_bot_private_key was needed on 2023-09-25 to pull and update the homebrew repo with the new bbr cli version. It was generated by 
homebrew_ci_bot_private_key: &homebrew_ci_bot_private_key  ((cerberus:homebrew_ci_bot.private_key))

#! slack_webhook was needed on 2023-09-25 to notify the team when we automatically cut a new release. Copied from Shared-Cryogenics/infrastructure-root/slack-webhooks in lastpass, originally generated (we think) by HelpNow+ ticket.
slack_webhook: &slack_webhook ((cerberus:slack.webhook))

#! test-bosh-director were needed on 2023-09-25. They are static values for deployments that are shared via the vault. These were most created manually at some point and put into vault so the tasks using them have expected values. 
test-bosh-director-ip: &test-bosh-director-ip 10.0.255.5
test-bosh-director-ip-priv-key: &test-bosh-director-ip-priv-key ((cerberus:test_bosh_director.private_key))
test-bosh-director-ip-pub-key: &test-bosh-director-ip-pub-key ((cerberus:test_bosh_director.public_key))

shepherd_account_key: &shepherd_account_key ((cerberus:shepherd.sa_key))
  #! shepherd_account_key was needed on 2023-09-28 to claim shepherd environments. It was created using `shepherd create service-account` after logging in with WS1.

#! **************
#! End of secrets
#! **************

number_of_claim_env_retries: &number_of_claim_env_retries 5

#! These are just recurring mappings to vars loaded via load_var steps.
ts-bosh-env: &ts-bosh-env
  BOSH_ENVIRONMENT: "((.:pooled-env.BOSH_ENVIRONMENT))"
  BOSH_CLIENT: "((.:pooled-env.BOSH_CLIENT))"
  BOSH_CLIENT_SECRET: "((.:pooled-env.BOSH_CLIENT_SECRET))"
  BOSH_CA_CERT: "((.:pooled-env.BOSH_CA_CERT))"
  BOSH_GW_HOST: "((.:pooled-env.INSTANCE_JUMPBOX_EXTERNAL_IP)):22"
  BOSH_GW_USER: "((.:pooled-env.INSTANCE_JUMPBOX_USER))"
  BOSH_GW_PRIVATE_KEY: "((.:pooled-env.INSTANCE_JUMPBOX_PRIVATE))"

ts-2-bosh-env: &ts-2-bosh-env
  BOSH_ENVIRONMENT: ((.:additional-pooled-env.BOSH_ENVIRONMENT))
  BOSH_CLIENT: ((.:additional-pooled-env.BOSH_CLIENT))
  BOSH_CLIENT_SECRET: ((.:additional-pooled-env.BOSH_CLIENT_SECRET))
  BOSH_CA_CERT: "((.:additional-pooled-env.BOSH_CA_CERT))"
  BOSH_GW_HOST: "((.:additional-pooled-env.INSTANCE_JUMPBOX_EXTERNAL_IP)):22"
  BOSH_GW_USER: "((.:additional-pooled-env.INSTANCE_JUMPBOX_USER))"
  BOSH_GW_PRIVATE_KEY: "((.:additional-pooled-env.INSTANCE_JUMPBOX_PRIVATE))"

test-bosh-director-deployment: &test-bosh-director-deployment test-bosh-director

var_sources:
- name: cerberus
  type: vault
  config:
    auth_backend: approle
    auth_params: *cerberus
    url: *cerberus_url 
    path_prefix: secret
groups:
- name: test
  jobs:
  - test-build-s3-config-validator
  - validate-aws-s3-config
  - claim-env
  - system-test-deployment
  - system-test-director
  - unclaim-env
  - merge-pr
  - govulncheck
- name: release-github
  jobs:
  - build-rc
  - run-drats
  - run-b-drats
  - check-for-changes
  - publish-to-github
  - update-homebrew-formula
- name: release-tanzunet
  jobs:
  - upload-to-tanzunet
  - request-osl
  - publish
- name: bump
  jobs:
  - bump-golang
  - bump-ci-tasks

resource_types:

- name: main
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    branch: master
    disable_git_lfs: true

- name: osm
  type: registry-image
  source:
    repository: eu.gcr.io/mapbu-cryogenics/osm-resource
    username: _json_key
    password: ((cerberus:gcr.viewer_key))
    tag: latest

- name: shepherd
  source:
    tag: v1
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
  type: registry-image

- name: github-release
  type: registry-image
  source: 
    repository: concourse/github-release-resource
    registry_mirror:
      host: harbor-repo.vmware.com

- name: pivnet
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/pivotalcf/pivnet-resource
    tag: latest-final
    registry_mirror:
      host: harbor-repo.vmware.com

- name: bosh-deployment-resource
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/cloudfoundry/bosh-deployment-resource
    registry_mirror:
      host: harbor-repo.vmware.com

- name: gcs
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/frodenas/gcs-resource
    registry_mirror:
      host: harbor-repo.vmware.com

- name: pcf-pool
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/cftoolsmiths/toolsmiths-envs-resource
    tag: latest
    registry_mirror:
      host: harbor-repo.vmware.com

- name: slack-notification
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    registry_mirror:
      host: harbor-repo.vmware.com

- name: pull-request
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/cryogenics/pr-queue-resource
    registry_mirror:
      host: harbor-repo.vmware.com

resources:
- name: cryogenics-essentials
  type: registry-image
  source:
    repository: cryogenics/essentials
    registry_mirror:
      host: harbor-repo.vmware.com

- name: pcfplatformrecovery-backup-and-restore
  type: registry-image
  source:
    repository: dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore
    registry_mirror:
      host: harbor-repo.vmware.com

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- name: every-month
  type: time
  source:
    interval: 720h #! (24h * 30 days) as It's basically golang and clamav bumps

- name: every-day
  type: time
  source:
    interval: 24h

- name: bbr-director-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore-test-releases.git
    private_key: *github_ssh_key
    branch: master
    paths:
    - test-bosh-backup-and-restore-release

- name: bbr-deployment-test-releases
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore-test-releases.git
    private_key: *github_ssh_key
    branch: master
    paths:
    - redis-test-release
    - lock-ordering-release
    - many-bbr-jobs-release

- name: latest-pull-request
  icon: source-pull
  type: pull-request
  source:
    base_branch: master
    repository: cloudfoundry/bosh-backup-and-restore
    access_token: *github_access_token
    disable_forks: true
    autosync_pr: true
    watch_checks_interval: "600"
    assign_to: "@me"

- name: main
  icon: github
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    branch: master
    disable_git_lfs: true

- name: bosh-backup-and-restore-bump-ci-tasks
  icon: github
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore.git
    private_key: *github_ssh_key
    disable_git_lfs: true

- name: bosh-backup-and-restore-golang-bump-branch
  icon: github
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-backup-and-restore.git
    private_key: *github_ssh_key

- name: homebrew-tap
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/homebrew-tap.git
    branch: master
    private_key: *homebrew_ci_bot_private_key

- name: bbr-artefacts
  type: s3
  icon: aws
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)\.tar
    <<: *aws-access

- name: bbr-release
  type: github-release
  icon: github
  source:
    repository: bosh-backup-and-restore
    user: cloudfoundry
    access_token: *github_access_token
    release: true

- name: release-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/final
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13
    driver: gcs

- name: release-candidate-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/release-candidate
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13-rc.1
    driver: gcs

- name: build-version
  type: semver
  icon: google
  source:
    bucket: release-versions
    key: bosh-backup-and-restore/build
    json_key: *gcp_service_accounts_bucket_owner
    initial_version: 1.9.13-build.516
    driver: gcs

- name: jammy-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: bosh-deployment
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-deployment.git

- name: test-bosh-director-deployment
  type: bosh-deployment-resource
  source:
    deployment: *test-bosh-director-deployment
    skip_check: true

- name: additional-test-bosh-director-deployment
  type: bosh-deployment-resource
  source:
    deployment: ci
    skip_check: true

- name: s3-config-validator-artefacts
  type: gcs
  icon: google
  source:
    bucket: cryo-bbr-s3-config-validator-test-artifacts
    json_key: *gcp_service_accounts_bucket_owner
    regexp: bbr-s3-config-validator.(.*).tgz

- name: tas-env
  type: shepherd
  icon: pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: #@ data.values.tas_versions[-1]["pool_name"]

- name: cryogenics-ci
  type: git
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    branch: main

- name: slack-cryo-notification
  type: slack-notification
  source:
    url: *slack_webhook

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: main

- name: cf-deployment-env
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/disaster-recovery-acceptance-tests
    branch: main

- name: b-drats
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-disaster-recovery-acceptance-tests
    branch: master

- name: environment
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: additional-environment
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: osl
  type: osm
  source:
    product: p-bosh-backup-and-restore
    api_key: *osm_api_key

- name: p-bosh-backup-and-restore
  type: pivnet
  source:
    api_token: *pivnet_admin_api_token
    product_slug: p-bosh-backup-and-restore
    copy_metadata: true

jobs:
- name: system-test-director
  serial: true
  serial_groups: [system-test-director]
  plan:
  - in_parallel:
    - get: environment
      passed: [claim-env]
      trigger: true
    - get: latest-pull-request
      passed: [claim-env]
    - get: bosh-deployment
    - get: bbr-director-test-releases
    - get: jammy-stemcell
    - get: cryogenics-ci
      passed: [claim-env]
    - get: cryogenics-essentials
    - get: pcfplatformrecovery-backup-and-restore
  - task: alias-env
    image: cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: environment
  - load_var: pooled-env
    file: bosh-env/metadata.yml
    format: yml
  - task: generate-bosh-deployment-source-file
    image: pcfplatformrecovery-backup-and-restore
    file: latest-pull-request/ci/tasks/bosh-deployment-resource-source-file-adapter/task.yml
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      <<: *ts-bosh-env
  - put: deploy-fake-director
    resource: test-bosh-director-deployment
    params:
      manifest: latest-pull-request/fixtures/fake-director.yml
      stemcells: [jammy-stemcell/*.tgz]
      source_file: source-file/source-file.yml
      vars:
        deployment-name: test-bosh-director
        jumpbox-public-key: *jumpbox_public_key 
        test_release_path: /tmp/build/put/bbr-director-test-releases/test-bosh-backup-and-restore-release
        internal_ip: *test-bosh-director-ip
  - task: system-test-director
    file: latest-pull-request/ci/tasks/bbr-system-director/task.yml
    image: cryogenics-essentials
    privileged: true
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
    params:
      USE_SHUTTLE: false
      CREDHUB_SERVER: "((.:pooled-env.CREDHUB_SERVER))"
      CREDHUB_CLIENT: "((.:pooled-env.CREDHUB_CLIENT))"
      CREDHUB_SECRET: "((.:pooled-env.CREDHUB_SECRET))"
      CREDHUB_CA_CERT: "((.:pooled-env.CREDHUB_CA_CERT))"
      DIRECTOR_HOST: *test-bosh-director-ip
      DIRECTOR_SSH_KEY: *test-bosh-director-ip-priv-key
      DIRECTOR_SSH_USERNAME: jumpbox
      BOSH_DEPLOYMENT: *test-bosh-director-deployment
      GITHUB_SDK_PRIVATE_KEY: *github_ssh_key
      <<: *ts-bosh-env

  - put: delete-system-director
    resource: test-bosh-director-deployment
    params:
      delete:
        enabled: true
      source_file: source-file/source-file.yml

- name: system-test-deployment
  serial: true
  plan:
  - in_parallel:
    - get: bbr-deployment-test-releases
      trigger: true
    - get: environment
      passed: [claim-env]
      trigger: true
    - get: additional-environment
      passed: [claim-env]
    - get: bosh-backup-and-restore
      resource: latest-pull-request
      passed: [claim-env]
    - get: bbr-director-test-releases
    - get: jammy-stemcell
    - get: pcfplatformrecovery-backup-and-restore 
    - get: cryogenics-ci
      passed: [claim-env]
    - get: cryogenics-essentials
  - task: alias-env
    image: cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: environment
  - load_var: pooled-env
    file: bosh-env/metadata.yml
    format: yml
  - task: alias-additional-env
    image: cryogenics-essentials
    file: cryogenics-ci/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      cryogenics-tasks: cryogenics-ci
      toolsmiths-env: additional-environment
    output_mapping:
      bosh-env: additional-bosh-env
  - load_var: additional-pooled-env
    file: additional-bosh-env/metadata.yml
    format: yml
  - task: generate-bosh-deployment-source-file
    image: pcfplatformrecovery-backup-and-restore
    file: bosh-backup-and-restore/ci/tasks/bosh-deployment-resource-source-file-adapter/task.yml
    params:
      <<: *ts-2-bosh-env
  - put: deploy-fake-director
    resource: additional-test-bosh-director-deployment
    params:
      manifest: bosh-backup-and-restore/fixtures/fake-director.yml
      stemcells: [jammy-stemcell/*.tgz]
      source_file: source-file/source-file.yml
      vars:
        deployment-name: ci
        jumpbox-public-key: *test-bosh-director-ip-pub-key
        test_release_path: /tmp/build/put/bbr-director-test-releases/test-bosh-backup-and-restore-release
        internal_ip: *test-bosh-director-ip
  - in_parallel:
    - task: upload-redis-test-release-to-bosh
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      image: cryogenics-essentials
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-2-bosh-env
    - task: upload-many-bbr-jobs-release-to-bosh-uaa
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      image: cryogenics-essentials
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *ts-2-bosh-env
    - task: upload-many-bbr-jobs-release-to-bosh
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      image: cryogenics-essentials
      params:
        RELEASE_NAME: many-bbr-jobs-release
        <<: *ts-bosh-env
    - task: upload-redis-test-release-to-bosh
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      image: cryogenics-essentials
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-bosh-env
    - task: upload-redis-test-release-to-bosh-uaa
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      image: cryogenics-essentials
      params:
        RELEASE_NAME: redis-test-release
        <<: *ts-2-bosh-env
    - task: upload-lock-ordering-release-to-bosh-uaa
      image: cryogenics-essentials
      file: bosh-backup-and-restore/ci/tasks/bbr-upload-system-test-releases/task.yml
      params:
        RELEASE_NAME: lock-ordering-release
        <<: *ts-2-bosh-env

    - task: allow-connections-to-bosh-director-on-port-25555
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: cryogenics/essentials
            registry_mirror:
              host: harbor-repo.vmware.com
        inputs:
          - name: additional-environment
        run:
          path: /bin/bash
          args:
          - -c
          - |
              #!/bin/bash
              . <(smith -l additional-environment/metadata bosh)
              ENV_NAME=$(cat additional-environment/metadata | jq .name -r)
              bosh cc > cc.yml
              bosh ucc -n <( bosh int cc.yml -o <( echo -e "- type: replace\n  path: /vm_types/name=minimal/cloud_properties/tags?\n  value: [${ENV_NAME}-bosh-open]") )
            
      
  - task: system-deployment-with-uaa
    image: cryogenics-essentials
    file: bosh-backup-and-restore/ci/tasks/bbr-system-deployment/task.yml
    params:
      GITHUB_SDK_PRIVATE_KEY: *github_ssh_key
      <<: *ts-2-bosh-env

- name: test-build-s3-config-validator
  serial_groups:
  - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: latest-pull-request
      trigger: true
    - get: build-version
      params: {pre: build}
    - get: cryogenics-essentials
  - task: unit-test
    image: cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-unit-test/task.yml
    params:
      <<: *AWS_ACCESS
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: e2e-test
    image: cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-e2e-test/task.yml
    params:
      <<: *AWS_ACCESS
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
  - task: build
    image: cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-build/task.yml
    input_mapping:
      version: build-version
      repo: latest-pull-request
  - put: build-version
    params: {file: build-version/number}
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: validate-aws-s3-config
  serial: true
  plan:
  - in_parallel:
    - get: s3-config-validator-artefacts
      passed: [test-build-s3-config-validator]
      trigger: true
    - get: latest-pull-request
      passed: [test-build-s3-config-validator]
    - get: cryogenics-essentials
  - task: move-and-run-validator
    image: cryogenics-essentials
    file: latest-pull-request/ci/tasks/bbr-s3-config-validator-validate-aws-s3-config/task.yml
    params:
      <<: *AWS_ACCESS_2
    input_mapping:
      bosh-backup-and-restore: latest-pull-request
      bbr-s3-config-validator-test-artifacts: s3-config-validator-artefacts

- name: merge-pr
  plan:
  - in_parallel:
    - get: latest-pull-request
      passed: [system-test-deployment, system-test-director, validate-aws-s3-config]
      trigger: true
  - put: latest-pull-request
    params:
      merge: true

- name: build-rc
  serial_groups:
  - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: main
      trigger: true
    - get: release-candidate-version
      params:
        pre: rc
    - get: cryogenics-essentials
    - get: next-release-version
      resource: release-candidate-version
      params:
        bump: final
  - task: build-bbr
    file: main/ci/tasks/bbr-build/task.yml
    image: cryogenics-essentials
    params:
      GITHUB_SDK_PRIVATE_KEY: *github_ssh_key
    input_mapping:
      release-version: next-release-version
      release-candidate-version: release-candidate-version
      bosh-backup-and-restore: main
  - task: build-s3-config-validator
    file: main/ci/tasks/bbr-s3-config-validator-build/task.yml
    image: cryogenics-essentials
    input_mapping:
      version: release-candidate-version
      repo: main
  - put: release-candidate-version
    params:
      file: release-candidate-version/number
  - put: bbr-artefacts
    params: {file: bbr-build/bbr-*.tar}
  - put: s3-config-validator-artefacts
    params:
      file: bbr-s3-config-validator-test-artifacts/*

- name: run-drats
  serial: true
  plan:
  - get: cf-deployment
  - get: cf-deployment-concourse-tasks
  - get: disaster-recovery-acceptance-tests
  - get: cryogenics-essentials
  - get: bbr-artefacts
    trigger: true
    passed:
    - build-rc
  - put: cf-deployment-env
    attempts: *number_of_claim_env_retries
    timeout: 6h
    params:
      action: create
      duration: 24h
      resource: cf-deployment-env
      timeout: 6h
  - task: deploy-backup-restore-components
    image: cryogenics-essentials 
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      toolsmiths-env: cf-deployment-env
      ops-files: cf-deployment
    params:
      OPS_FILES: >
        operations/scale-to-one-az.yml
        operations/use-compiled-releases.yml
        operations/backup-and-restore/enable-backup-restore.yml
        operations/enable-nfs-volume-service.yml
        operations/experimental/disable-interpolate-service-bindings.yml
        operations/experimental/enable-traffic-to-internal-networks.yml
        operations/enable-smb-volume-service.yml
        operations/backup-and-restore/skip-backup-restore-droplets-and-packages.yml
  - task: bosh-run-errand-nfsbrokerpush
    attempts: 5
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials 
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: nfsbrokerpush
  - task: bosh-run-errand-smbbrokerpush
    attempts: 5
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials 
    input_mapping:
      toolsmiths-env: cf-deployment-env
    params:
      ERRAND_NAME: smbbrokerpush
  - load_var: pooled-env
    file: cf-deployment-env/metadata
    format: json
  - task: update-integration-config
    file: disaster-recovery-acceptance-tests/ci/tasks/update-integration-config/task.yml
    image: cryogenics-essentials 
    input_mapping:
      integration-configs: disaster-recovery-acceptance-tests
    params:
      SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
      JUMPBOX_PRIVATE_KEY: ((.:pooled-env.bosh.jumpbox_private_key))
      CREDHUB_CLIENT: ((.:pooled-env.bosh.credhub_client))
      CREDHUB_SECRET: ((.:pooled-env.bosh.credhub_secret))
      CREDHUB_CA_CERT: ((.:pooled-env.bosh.credhub_ca_cert))
      CREDHUB_SERVER: ((.:pooled-env.bosh.credhub_server))
      CREDHUB_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_ENVIRONMENT: ((.:pooled-env.bosh.bosh_environment))
      BOSH_CA_CERT: ((.:pooled-env.bosh.bosh_ca_cert))
      BOSH_ALL_PROXY: ((.:pooled-env.bosh.bosh_all_proxy))
      BOSH_CLIENT: ((.:pooled-env.bosh.bosh_client))
      BOSH_CLIENT_SECRET: ((.:pooled-env.bosh.bosh_client_secret))
  - task: acceptance-tests
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    image: cryogenics-essentials 
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
      bbr-binary-release: bbr-artefacts
    params:
      CONFIG_FILE_PATH: ci/integration_config.json
      CF_DIAL_TIMEOUT: 300
  - put: cf-deployment-env
    params:
      action: release
      resource: cf-deployment-env

- name: run-b-drats
  serial: true
  plan:
  - in_parallel:
    - get: b-drats
    - get: bbr-artefacts
      trigger: true
      params:
        unpack: true
      passed:
      - build-rc
    - get: cryogenics-ci
    - get: jammy-stemcell
    - get: cryogenics-essentials
    - get: pcfplatformrecovery-backup-and-restore
  - do:
    - put: tas-env
      attempts: *number_of_claim_env_retries
      timeout: 6h
      params:
        action: create
        duration: 24h
        resource: tas-env
        timeout: 6h
    - in_parallel:
      - task: create-b-drats-config
        file: cryogenics-ci/tasks/toolsmiths/generate-b-drats-config-from-tas-env/task.yml
        image: pcfplatformrecovery-backup-and-restore 
        input_mapping:
          repo: cryogenics-ci
          env: tas-env
          stemcell: jammy-stemcell
        params:
          INCLUDE_DEPLOYMENT_TESTCASE: true
          INCLUDE_TRUNCATE_DB_BLOBSTORE_TESTCASE: false
          INCLUDE_CREDHUB_TESTCASE: false
          TIMEOUT_IN_MINUTES: 2_880 #! 48h
        output_mapping:
          config: b-drats-config
      - load_var: env-metadata
        file: tas-env/metadata
        format: json
    - task: run-b-drats
      file: b-drats/ci/tasks/run-b-drats/task.yml
      image: cryogenics-essentials 
      privileged: true
      input_mapping:
        bosh-disaster-recovery-acceptance-tests: b-drats
        bbr-binary-release: bbr-artefacts
        b-drats-integration-config: b-drats-config
      params:
        JUMPBOX_IP: ((.:env-metadata.ops_manager_public_ip))
        JUMPBOX_PRIVATE_KEY: ((.:env-metadata.ops_manager_private_key))
        JUMPBOX_USER: ubuntu
        BBR_BINARY: bbr-binary-release/releases/bbr
        SSH_ALIVE_INTERVAL: 60 #! in seconds
        GINKGO_TIMEOUT: 48h0m0s #! 48h to be consistent with TIMEOUT_IN_MINUTES in the b-drats test config from the previous task.
    ensure:
      put: tas-env
      params:
        action: release
        resource: tas-env

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-month
      trigger: true
    - get: main
      passed:
      - build-rc
    - get: bbr-artefacts
      passed:
      - run-drats
      - run-b-drats
    - get: s3-config-validator-artefacts
      passed:
      - build-rc
    - get: release-candidate-version
      passed:
      - build-rc

- name: publish-to-github
  serial: true
  serial_groups:
  - only_1_job_should_bump_the_BUILD_VERSION_at_a_time_to_avoid_race_condition
  - only_1_job_should_bump_the_RELEASE_CANDIDATE_VERSION_at_a_time_to_avoid_race_condition
  plan:
  - in_parallel:
    - get: cryogenics-ci
      passed: [run-b-drats]
    - get: main
      trigger: true
      passed:
      - check-for-changes
    - get: bbr-artefacts
      passed:
      - check-for-changes
      params:
        unpack: true
    - get: s3-config-validator-artefacts
      params:
        unpack: true
      passed:
      - check-for-changes
    - get: release-candidate-version
      params:
        bump: final
      passed:
      - check-for-changes
    - get: cryogenics-essentials
  - load_var: version-number
    file: release-candidate-version/number
  - task: promote-rc-binaries
    image: cryogenics-essentials 
    file: main/ci/tasks/promote-release-candidate/task.yml
    input_mapping:
      version: release-candidate-version
      bbr-rc-artefacts: bbr-artefacts
      s3-config-validator-rc-artefacts: s3-config-validator-artefacts
      repo: main
  - put: release-version
    params:
      file: release-candidate-version/number
  - put: release-candidate-version
    params:
      bump: patch
      pre: rc
  - put: build-version
    params:
      bump: patch
      pre: build
  - task: create-release-notes
    file: cryogenics-ci/tasks/release-automation/release-notes/task.yml
    image: cryogenics-essentials 
    input_mapping:
      git-repo: main
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    file: cryogenics-ci/tasks/release-automation/format-release-notes/task.yml
    image: cryogenics-essentials 
    input_mapping:
      template-folder: cryogenics-ci
      cryogenics-concourse-tasks: cryogenics-ci
    params:
      VERSION: ((.:version-number))
      TEMPLATE_PATH: tasks/release-automation/release-notes-templates/docs-release-notes-auto.md.erb
  - put: bbr-release
    params:
      name: release-version/number
      tag: release-version/number
      tag_prefix: v
      body: release-notes/release-notes.md
      globs:
      - promoted-artefacts/bbr*
    on_success:
      do:
      - load_var: github-release-url
        file: bbr-release/url
      - put: slack-cryo-notification
        params:
          text: |
            *BBR CLI*: version `((.:version-number))` has been published 🎉
            Next steps (cc <!subteam^S028XABEHAP>):
              1. Review the release notes <((.:github-release-url))|here>.

- name: update-homebrew-formula
  serial: true
  plan:
  - in_parallel:
    - get: homebrew-tap
    - get: bbr-release
      passed:
      - publish-to-github
      trigger: true
    - get: main
      passed:
      - publish-to-github
    - get: cryogenics-essentials
  - task: update-homebrew-formula
    file: main/ci/tasks/bbr-update-homebrew-formula/task.yml
    image: cryogenics-essentials 
    input_mapping:
      bbr-release: bbr-release
      homebrew-tap: homebrew-tap
      bosh-backup-and-restore: main
  - put: homebrew-tap
    params:
      repository: updated-homebrew-tap
      rebase: true

- name: claim-env
  plan:
  - in_parallel:
      steps:
      - get: latest-pull-request
        trigger: true
      - get: cryogenics-ci
      - put: environment
        attempts: *number_of_claim_env_retries
        timeout: 6h
        params:
          action: create
          duration: 24h
          resource: environment
          timeout: 6h
      - put: additional-environment
        attempts: *number_of_claim_env_retries
        timeout: 6h
        params:
          action: create
          duration: 24h
          resource: additional-environment
          timeout: 6h

- name: unclaim-env
  plan:
  - in_parallel:
      steps:
      - get: latest-pull-request
        trigger: true
        passed:
        - system-test-deployment
        - system-test-director
      - get: environment
        passed:
        - system-test-deployment
        - system-test-director
      - get: additional-environment
        passed:
        - system-test-deployment
  - put: environment
    params:
      action: release
      resource: environment
  - put: additional-environment
    params:
      action: release
      resource: additional-environment

- name: bump-golang
  plan:
  - in_parallel:
    - get: cryogenics-concourse-tasks
      resource: cryogenics-ci
    - get: golang-release
      trigger: true
    - get: bosh-backup-and-restore
      resource: main
      params:
        branch: master
    - get: cryogenics-essentials
  - task: update-gomod-directive-for-bbr-cli
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials
    params:
      PATH_TO_GO_MODULE: .
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: bosh-backup-and-restore
    output_mapping:
  - task: update-gomod-directive-for-s3-validator
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials
    params:
      PATH_TO_GO_MODULE: s3-config-validator/src
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: bosh-backup-and-restore
    output_mapping:
      golang-project-repo: bosh-backup-and-restore
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: bosh-backup-and-restore-golang-bump-branch
    params:
      repository: bosh-backup-and-restore
      branch: &golang-vendor-branch bump-golang-based-on-golang-vendor-((.:golang-release-version))
      force: true
  - try:
      task: create-golang-vendor-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Bump Golang based on golang-vendor-((.:golang-release-version))
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.

          I have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and automatically bumped this package to benefit from the latest changes.

          If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
      input_mapping:
        source-repo: bosh-backup-and-restore-golang-bump-branch

- name: bump-ci-tasks
  plan:
  - in_parallel:
    - get: cryogenics-essentials
      trigger: true
    - get: cryogenics-concourse-tasks
      resource: cryogenics-ci
    - get: main
  - in_parallel:
    - load_var: cryogenics-essentials-version
      file: cryogenics-essentials/tag
    - task: bump-tasks
      file: cryogenics-concourse-tasks/deps-automation/bump-concourse-tasks/task.yml
      image: cryogenics-essentials
      input_mapping:
        repo: main
        image: cryogenics-essentials
      output_mapping:
        repo: main
  - put: bosh-backup-and-restore-bump-ci-tasks
    params:
      repository: main
      branch: &bump-ci-task-branch bump-cryogenics-essentials-to-v((.:cryogenics-essentials-version))
      force: true
  - task: create-pull-request
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    image: cryogenics-essentials
    params:
      BASE: master
      BRANCH: *bump-ci-task-branch
      LABELS: dependencies
      TITLE: Bump cryogenics/essentials to v((.:cryogenics-essentials-version))
      MESSAGE: |
        This is an automatically generated Pull Request from the Cryogenics CI Bot.
        I have detected a new version of [cryogenics/essentials](https://hub.docker.com/r/cryogenics/essentials/tags) and automatically bumped
        this package to benefit from the latest changes.
        If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
    input_mapping:
      source-repo: bosh-backup-and-restore-bump-ci-tasks

- name: govulncheck
  plan:
    - in_parallel:
        - get: main
          trigger: true
        - get: every-day
          trigger: true
    - task: govulncheck
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: cryogenics/essentials
            registry_mirror:
              host: harbor-repo.vmware.com
        inputs:
          - name: main
            path: bosh-backup-and-restore
        run:
          path: /usr/bin/bash
          args:
            - -c
            - |
              set -ex
              set -o pipefail

              go install golang.org/x/vuln/cmd/govulncheck@latest

              pushd "bosh-backup-and-restore"
                for dir in $(find . -name go.mod | xargs -n1 dirname); do
                  pushd "$dir"
                    /root/go/bin/govulncheck -test ./...
                  popd
                done
              popd

- name: upload-to-tanzunet
  serial: true
  plan:
  - in_parallel:
    - get: release-version
    - get: bbr-release
      trigger: true
      params:
        globs:
          - bbr-*
  - load_var: version-number
    file: release-version/number
  - task: create-pivnet-metadata
    params:
      DEBUG: true
    config:
      platform: linux
      image_resource:
        source:
          repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ubuntu
        type: registry-image

      inputs:
        - name: bbr-release
        - name: release-version

      outputs:
        - name: release-metadata

      run:
        path: /bin/bash
        args:
          - -c
          - |
            [ -z "$DEBUG" ] || set -x

            set -euo pipefail

            : "${VERSION:="$(cat release-version/number)"}"

            TODAY="$(date "+%Y-%m-%d")"

            cat > release-metadata/release.yml <<EOF
            ---
            release:
              version: "$VERSION"
              release_type: Maintenance Release
              eula_slug: vmware_eula
              description: |
                BOSH Backup and Restore binary and S3 Config Validator

                BBR can be used to back up and restore many bosh releases and bosh directors. This includes TAS, and the bosh director that ships with Ops Manager. You should always use the latest version of the BBR CLI to back up and restore from any version of Ops Manager or TAS.

                If you are upgrading TAS, we recommend you take a backup immediately before upgrading, and immediately after a successful upgrade. This is because backups from the old version of TAS may not be compatible with the new version of TAS.
              release_notes_url: https://docs.pivotal.io/bbr/bbr-rn.html
              availability: All Users
              release_date: "$TODAY"
            dependency_specifiers: []
            product_files:
            - file: bbr-release/bbr-${VERSION}.tar
              upload_as: BOSH Backup and Restore
              description: |
                BBR and BBR-s3-config-validator binaries for Linux and Darwin.
              file_type: "Software"
              docs_url: "https://docs.pivotal.io/bbr/index.html"
              platforms: ["Linux", "Darwin"]
              included_files: ["bbr", "bbr-mac", "checksum256", "bbr-s3-config-validator", "bbr-s3-config-validator.README.md"]

            - file: bbr-release/bbr-${VERSION}-linux-amd64
              upload_as: BOSH Backup and Restore Linux
              description: |
                BBR binary for Linux
              file_type: "Software"
              docs_url: "https://docs.pivotal.io/bbr/index.html"
              platforms: ["Linux"]

            - file: bbr-release/bbr-${VERSION}-darwin-amd64
              upload_as: BOSH Backup and Restore Darwin
              description: |
                BBR binary for Darwin
              file_type: "Software"
              docs_url: "https://docs.pivotal.io/bbr/index.html"
              platforms: ["Darwin"]

            - file: bbr-release/bbr-s3-config-validator-${VERSION}-linux-amd64
              upload_as: BOSH Backup and Restore S3 Configuration Validator Linux
              description: |
                BBR-s3-config-validator binary for Linux
              file_type: "Software"
              docs_url: "https://docs.pivotal.io/bbr/index.html"
              platforms: ["Linux"]

            - file: bbr-release/bbr-s3-config-validator-${VERSION}.README.md
              upload_as: BOSH Backup and Restore S3 Configuration Validator README
              description: |
                BBR-s3-config-validator README
              file_type: "Documentation"
              docs_url: "https://docs.pivotal.io/bbr/index.html"
              platforms: ["Linux"]
            EOF

            [ -z "$DEBUG" ] || cat release-metadata/*
  - put: p-bosh-backup-and-restore
    params:
      metadata_file: release-metadata/release.yml
      s3_filepath_prefix: product-files/bosh-backup-restore
      file_glob: bbr-release/bbr-*[^.sha256]
      override: true

- name: request-osl
  plan:
  - get: p-bosh-backup-and-restore
    trigger: true
    passed:
      - upload-to-tanzunet
  - load_var: pivnet-metadata
    file: p-bosh-backup-and-restore/metadata.yaml
    format: yaml
  - get: release-version
    params:
      bump: final
      #! Hack to convert number to string in YAML
      build: |
        ((.:pivnet-metadata.release.id))
      build_without_version: true
    passed:
    - upload-to-tanzunet
  - load_var: version
    file: release-version/number
    format: trim
  - put: osl
    params:
      version: ((.:version))
      user: fiain@vmware.com
      license: VMW_Proprietary
      release_type: GA
      associated_bossd_release: 400400894

- name: publish
  serial: true
  plan:
  - in_parallel:
    #! We have added this step just to be able to place the publish job in the
    #! end of the pipeline because we wanted to use a time dimension to
    #! represent the flow (therefore this job should be the last).
    - get: p-bosh-backup-and-restore
      passed:
        - request-osl
    - get: osl
      trigger: true
  - load_var: osl-metadata
    file: osl/metadata.json
    format: json
  - task: create-pivnet-metadata
    params:
      VERSION: ((.:osl-metadata.version))
      DEBUG: true
    config:
      platform: linux
      image_resource:
        source:
          repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ubuntu
        type: registry-image
      inputs:
        - name: osl
      outputs:
        - name: release-metadata
        - name: static-osl

      run:
        path: /bin/bash
        args:
          - -c
          - |
            [ -z "$DEBUG" ] || set -x

            set -euo pipefail

            : "${VERSION:?}"
            : "${BUILD_METADATA:="${VERSION/${VERSION%+*}/}"}"

            if [ -z "$BUILD_METADATA" ]
            then
              >&2 cat <<EOF
            It seems the OSL Release Version \"$VERSION\" does not contain the Pivnet Release ID in its build metadata.
            A version format similar to \"1.2.3+456\" was expected where \"456\" it the Pivnet Release ID.
            This is required so that the OSL file can be attached to the right release.
            Maybe you might want to manually attach the OSL to the Pivnet Release this time round?
            EOF

              exit 1
            fi

            cat > release-metadata/existing-release.yml << EOF
            existing_release:
              id: ${BUILD_METADATA/+/}
            product_files:
            - file: static-osl/open_source_license_bosh_backup_and_restore_${VERSION}_ga.txt
              file_type: Open Source License
              file_version: ${VERSION}
            - file: static-osl/vmware-p-bosh-backup-and-restore-${VERSION}-odp.tar.gz
              file_type: Open Source License
              file_version: ${VERSION}
            EOF

            mv osl/*.txt static-osl/open_source_license_bosh_backup_and_restore_${VERSION}_ga.txt
            mv osl/*.tar.gz static-osl/vmware-p-bosh-backup-and-restore-${VERSION}-odp.tar.gz

            [ -z "$DEBUG" ] || cat release-metadata/*
  - put: p-bosh-backup-and-restore
    params:
      file_glob: static-osl/*((.:osl-metadata.version))*
      metadata_file: release-metadata/existing-release.yml
      s3_filepath_prefix: product-files/bosh-backup-restore
  - put: slack-cryo-notification
    params:
      text: |
        *p-bosh-backup-and-restore:* The OSL and OBP files for version `((.:osl-metadata.version))` have been uploaded to <https://network.pivotal.io/products/p-bosh-backup-and-restore|Tanzunet> and the release has been published :partycat: